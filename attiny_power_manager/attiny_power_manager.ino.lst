
C:\Users\pihlstro\AppData\Local\Temp\arduino_build_423854/attiny_power_manager.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
../../../../crt1/gcrt1.S:63
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:64
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:65
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:66
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:67
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:68
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:69
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:70
      20:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__vector_8>
../../../../crt1/gcrt1.S:71
      24:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:74
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:75
      34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:76
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:80
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:83
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:84
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:85
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:86
      60:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__vector_24>
../../../../crt1/gcrt1.S:87
      64:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__vector_25>
../../../../crt1/gcrt1.S:88
      68:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      6c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      70:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:91
      74:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
../../../../crt1/gcrt1.S:92
      78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

0000007c <__trampolines_end>:
__trampolines_start():
      7c:	01 01       	movw	r0, r2
      7e:	00 00       	nop
      80:	00 01       	movw	r0, r0
      82:	01 01       	movw	r0, r2
      84:	00 01       	movw	r0, r0
	...

00000088 <digital_pin_to_bit_position>:
      88:	04 05 06 07 03 02 01 00 01 02 03 00                 ............

00000094 <digital_pin_to_port>:
      94:	00 00 00 00 01 01 01 01 00 00 00 00                 ............

000000a0 <digital_pin_to_bit_mask>:
      a0:	10 20 40 80 08 04 02 01 02 04 08 01                 . @.........

000000ac <__ctors_start>:
__ctors_start():
      ac:	f7 07       	cpc	r31, r23

000000ae <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:226
      ae:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:227
      b0:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:228
      b2:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:230
      b4:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:232
      b6:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:233
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      ba:	1c e3       	ldi	r17, 0x3C	; 60
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      bc:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      be:	bc e3       	ldi	r27, 0x3C	; 60
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      c0:	e4 e4       	ldi	r30, 0x44	; 68
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      c2:	f1 e1       	ldi	r31, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      c6:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      c8:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ca:	ae 30       	cpi	r26, 0x0E	; 14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      cc:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      d0:	2c e3       	ldi	r18, 0x3C	; 60
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      d2:	ae e0       	ldi	r26, 0x0E	; 14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      d4:	bc e3       	ldi	r27, 0x3C	; 60
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      da:	af 39       	cpi	r26, 0x9F	; 159
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      dc:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>

000000e0 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      e0:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      e2:	c7 e5       	ldi	r28, 0x57	; 87
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      e4:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      e8:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      ea:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      ec:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      f0:	c6 35       	cpi	r28, 0x56	; 86
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      f2:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:310
      f6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <main>
../../../../crt1/gcrt1.S:311
      fa:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <_exit>

000000fe <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:205
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <pinMode.part.1>:
pinMode.part.1():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:35
	return false;
};

void pinMode(uint8_t pin, PinMode mode)
{
	uint8_t bit_mask = digitalPinToBitMask(pin);
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	fc 01       	movw	r30, r24
     106:	e0 56       	subi	r30, 0x60	; 96
     108:	ff 4f       	sbci	r31, 0xFF	; 255
     10a:	24 91       	lpm	r18, Z
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:37

	if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP) || isDoubleBondedActive(pin)) return;
     10c:	2f 3f       	cpi	r18, 0xFF	; 255
     10e:	11 f1       	breq	.+68     	; 0x154 <pinMode.part.1+0x52>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:39

	PORT_t* port = digitalPinToPortStruct(pin);
     110:	fc 01       	movw	r30, r24
     112:	ec 56       	subi	r30, 0x6C	; 108
     114:	ff 4f       	sbci	r31, 0xFF	; 255
     116:	a4 91       	lpm	r26, Z
     118:	30 e2       	ldi	r19, 0x20	; 32
     11a:	a3 9f       	mul	r26, r19
     11c:	d0 01       	movw	r26, r0
     11e:	11 24       	eor	r1, r1
     120:	bc 5f       	subi	r27, 0xFC	; 252
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:42
	if(port == NULL) return;

	if(mode == OUTPUT){
     122:	61 30       	cpi	r22, 0x01	; 1
     124:	71 05       	cpc	r23, r1
     126:	19 f4       	brne	.+6      	; 0x12e <pinMode.part.1+0x2c>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:45

		/* Configure direction as output */
		port->DIRSET = bit_mask;
     128:	11 96       	adiw	r26, 0x01	; 1
     12a:	2c 93       	st	X, r18
     12c:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:49

	} else { /* mode == INPUT or INPUT_PULLUP */

		uint8_t bit_pos = digitalPinToBitPosition(pin);
     12e:	fc 01       	movw	r30, r24
     130:	e8 57       	subi	r30, 0x78	; 120
     132:	ff 4f       	sbci	r31, 0xFF	; 255
     134:	e4 91       	lpm	r30, Z
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:51
		/* Calculate where pin control register is */
		volatile uint8_t* pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     136:	ef 3f       	cpi	r30, 0xFF	; 255
     138:	71 f0       	breq	.+28     	; 0x156 <pinMode.part.1+0x54>
     13a:	cd 01       	movw	r24, r26
     13c:	40 96       	adiw	r24, 0x10	; 16
     13e:	e8 0f       	add	r30, r24
     140:	f9 2f       	mov	r31, r25
     142:	f1 1d       	adc	r31, r1
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:54

		/* Save state */
		uint8_t status = SREG;
     144:	9f b7       	in	r25, 0x3f	; 63
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:55
		cli();
     146:	f8 94       	cli
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:58

		/* Configure direction as input */
		port->DIRCLR = bit_mask;
     148:	12 96       	adiw	r26, 0x02	; 2
     14a:	2c 93       	st	X, r18
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:64

		/* Configure pull-up resistor */
		if(mode == INPUT_PULLUP){

			/* Enable pull-up */
			*pin_ctrl_reg |= PORT_PULLUPEN_bm;
     14c:	80 81       	ld	r24, Z
     14e:	88 60       	ori	r24, 0x08	; 8
     150:	80 83       	st	Z, r24
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:73
			/* Disable pull-up */
			*pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
		}

		/* Restore state */
		SREG = status;
     152:	9f bf       	out	0x3f, r25	; 63
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:75
	}
}
     154:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:51

	} else { /* mode == INPUT or INPUT_PULLUP */

		uint8_t bit_pos = digitalPinToBitPosition(pin);
		/* Calculate where pin control register is */
		volatile uint8_t* pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	e0 e0       	ldi	r30, 0x00	; 0
     15a:	f4 cf       	rjmp	.-24     	; 0x144 <pinMode.part.1+0x42>

0000015c <turnOffPWM.part.0>:
turnOffPWM.part.0():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:96
static void turnOffPWM(uint8_t pin)
{
	/* Actually turn off compare channel, not the timer */

	/* Get pin's timer */
	uint8_t timer = digitalPinToTimer(pin);
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	fc 01       	movw	r30, r24
     160:	e4 58       	subi	r30, 0x84	; 132
     162:	ff 4f       	sbci	r31, 0xFF	; 255
     164:	24 91       	lpm	r18, Z
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:97
	if(timer == NOT_ON_TIMER) return;
     166:	22 23       	and	r18, r18
     168:	c1 f0       	breq	.+48     	; 0x19a <turnOffPWM.part.0+0x3e>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:99

	uint8_t bit_pos = digitalPinToBitPosition(pin);
     16a:	88 57       	subi	r24, 0x78	; 120
     16c:	9f 4f       	sbci	r25, 0xFF	; 255
     16e:	fc 01       	movw	r30, r24
     170:	84 91       	lpm	r24, Z
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:102
	TCB_t *timerB;

	switch (timer) {
     172:	21 30       	cpi	r18, 0x01	; 1
     174:	91 f4       	brne	.+36     	; 0x19a <turnOffPWM.part.0+0x3e>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:107

	/* TCA0 */
	case TIMERA0:
		/* Bit position will give output channel */
		if (bit_pos>2) 	bit_pos++; //there's a blank bit in the middle
     176:	83 30       	cpi	r24, 0x03	; 3
     178:	08 f0       	brcs	.+2      	; 0x17c <turnOffPWM.part.0+0x20>
     17a:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:109
		/* Disable corresponding channel */
		TCA0.SPLIT.CTRLB &= ~(1 << (TCA_SPLIT_LCMP0EN_bp + bit_pos));
     17c:	40 91 01 0a 	lds	r20, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     180:	21 e0       	ldi	r18, 0x01	; 1
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	b9 01       	movw	r22, r18
     186:	02 c0       	rjmp	.+4      	; 0x18c <turnOffPWM.part.0+0x30>
     188:	66 0f       	add	r22, r22
     18a:	77 1f       	adc	r23, r23
     18c:	8a 95       	dec	r24
     18e:	e2 f7       	brpl	.-8      	; 0x188 <turnOffPWM.part.0+0x2c>
     190:	cb 01       	movw	r24, r22
     192:	80 95       	com	r24
     194:	84 23       	and	r24, r20
     196:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:142
		break;
	#endif
	default:
		break;
	}
}
     19a:	08 95       	ret

0000019c <digitalWrite.part.2>:
digitalWrite.part.2():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:144

void digitalWrite(uint8_t pin, PinStatus val)
     19c:	ff 92       	push	r15
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:147
{
	/* Get bit mask for pin */
	uint8_t bit_mask = digitalPinToBitMask(pin);
     1a6:	c8 2f       	mov	r28, r24
     1a8:	d0 e0       	ldi	r29, 0x00	; 0
     1aa:	fe 01       	movw	r30, r28
     1ac:	e0 56       	subi	r30, 0x60	; 96
     1ae:	ff 4f       	sbci	r31, 0xFF	; 255
     1b0:	f4 90       	lpm	r15, Z
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:148
	if(bit_mask == NOT_A_PIN || isDoubleBondedActive(pin)) return;
     1b2:	9f ef       	ldi	r25, 0xFF	; 255
     1b4:	f9 16       	cp	r15, r25
     1b6:	99 f0       	breq	.+38     	; 0x1de <digitalWrite.part.2+0x42>
     1b8:	8b 01       	movw	r16, r22
turnOffPWM():
     1ba:	0e 94 ae 00 	call	0x15c	; 0x15c <turnOffPWM.part.0>
digitalWrite.part.2():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:159
	turnOffPWM(pin);

	/* Assuming the direction is already output !! */

	/* Get port */
	PORT_t *port = digitalPinToPortStruct(pin);
     1be:	fe 01       	movw	r30, r28
     1c0:	ec 56       	subi	r30, 0x6C	; 108
     1c2:	ff 4f       	sbci	r31, 0xFF	; 255
     1c4:	a4 91       	lpm	r26, Z
     1c6:	80 e2       	ldi	r24, 0x20	; 32
     1c8:	a8 9f       	mul	r26, r24
     1ca:	d0 01       	movw	r26, r0
     1cc:	11 24       	eor	r1, r1
     1ce:	bc 5f       	subi	r27, 0xFC	; 252
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:162

	/* Output direction */
	if(port->DIR & bit_mask){
     1d0:	8c 91       	ld	r24, X
     1d2:	8f 21       	and	r24, r15
     1d4:	69 f0       	breq	.+26     	; 0x1f0 <digitalWrite.part.2+0x54>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:165

		/* Set output to value */
		if (val == LOW) { /* If LOW */
     1d6:	01 2b       	or	r16, r17
     1d8:	41 f4       	brne	.+16     	; 0x1ea <digitalWrite.part.2+0x4e>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:166
			port->OUTCLR = bit_mask;
     1da:	16 96       	adiw	r26, 0x06	; 6
     1dc:	fc 92       	st	X, r15
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:205

		/* Restore system status */
		SREG = status;
	}

}
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
     1e6:	ff 90       	pop	r15
     1e8:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:172

		} else if (val == CHANGE) { /* If TOGGLE */
			port->OUTTGL = bit_mask;
									/* If HIGH OR  > TOGGLE  */
		} else {
			port->OUTSET = bit_mask;
     1ea:	15 96       	adiw	r26, 0x05	; 5
     1ec:	fc 92       	st	X, r15
     1ee:	f7 cf       	rjmp	.-18     	; 0x1de <digitalWrite.part.2+0x42>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:183
		pull up is enabled if this function is called.
		Should we purposely implement this side effect?
		*/

		/* Get bit position for getting pin ctrl reg */
		uint8_t bit_pos = digitalPinToBitPosition(pin);
     1f0:	fe 01       	movw	r30, r28
     1f2:	e8 57       	subi	r30, 0x78	; 120
     1f4:	ff 4f       	sbci	r31, 0xFF	; 255
     1f6:	e4 91       	lpm	r30, Z
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:186

		/* Calculate where pin control register is */
		volatile uint8_t* pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     1f8:	10 97       	sbiw	r26, 0x00	; 0
     1fa:	79 f0       	breq	.+30     	; 0x21a <digitalWrite.part.2+0x7e>
     1fc:	ef 3f       	cpi	r30, 0xFF	; 255
     1fe:	69 f0       	breq	.+26     	; 0x21a <digitalWrite.part.2+0x7e>
     200:	50 96       	adiw	r26, 0x10	; 16
     202:	ea 0f       	add	r30, r26
     204:	fb 2f       	mov	r31, r27
     206:	f1 1d       	adc	r31, r1
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:189

		/* Save system status and disable interrupts */
		uint8_t status = SREG;
     208:	9f b7       	in	r25, 0x3f	; 63
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:190
		cli();
     20a:	f8 94       	cli
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:194

		if(val == LOW){
			/* Disable pullup */
			*pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
     20c:	80 81       	ld	r24, Z
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:192

		/* Save system status and disable interrupts */
		uint8_t status = SREG;
		cli();

		if(val == LOW){
     20e:	01 2b       	or	r16, r17
     210:	39 f4       	brne	.+14     	; 0x220 <digitalWrite.part.2+0x84>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:194
			/* Disable pullup */
			*pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
     212:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:198

		} else {
			/* Enable pull-up */
			*pin_ctrl_reg |= PORT_PULLUPEN_bm;
     214:	80 83       	st	Z, r24
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:202
		}

		/* Restore system status */
		SREG = status;
     216:	9f bf       	out	0x3f, r25	; 63
     218:	e2 cf       	rjmp	.-60     	; 0x1de <digitalWrite.part.2+0x42>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:186

		/* Get bit position for getting pin ctrl reg */
		uint8_t bit_pos = digitalPinToBitPosition(pin);

		/* Calculate where pin control register is */
		volatile uint8_t* pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	e0 e0       	ldi	r30, 0x00	; 0
     21e:	f4 cf       	rjmp	.-24     	; 0x208 <digitalWrite.part.2+0x6c>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:198
			/* Disable pullup */
			*pin_ctrl_reg &= ~PORT_PULLUPEN_bm;

		} else {
			/* Enable pull-up */
			*pin_ctrl_reg |= PORT_PULLUPEN_bm;
     220:	88 60       	ori	r24, 0x08	; 8
     222:	f8 cf       	rjmp	.-16     	; 0x214 <digitalWrite.part.2+0x78>

00000224 <analogReference>:
analogReference():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:34
uint8_t analog_reference = DEFAULT;

void analogReference(uint8_t mode)
{
	/* Clear relevant settings */
	ADC0.CTRLC &= ~(ADC_REFSEL_gm);
     224:	90 91 02 06 	lds	r25, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     228:	9f 7c       	andi	r25, 0xCF	; 207
     22a:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:35
	VREF.CTRLA &= ~(VREF_ADC0REFSEL_gm);
     22e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     232:	9f 78       	andi	r25, 0x8F	; 143
     234:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:41

	/* If reference NOT using internal reference from VREF */
	#ifdef EXTERNAL
	if((mode == EXTERNAL) || (mode == VDD)) {
	#else
    if((mode == VDD)) {
     238:	80 31       	cpi	r24, 0x10	; 16
     23a:	31 f4       	brne	.+12     	; 0x248 <analogReference+0x24>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:45
	#endif

		/* Set reference in ADC peripheral */
		ADC0.CTRLC |= mode;
     23c:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     240:	80 61       	ori	r24, 0x10	; 16
     242:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     246:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:48

	/* If reference using internal reference from VREF */
	} else if (
     248:	85 30       	cpi	r24, 0x05	; 5
     24a:	70 f4       	brcc	.+28     	; 0x268 <analogReference+0x44>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:56
		|| (mode == INTERNAL2V5)
		|| (mode == INTERNAL4V3)
		|| (mode == INTERNAL1V5)) {

		/* Set ADC reference to INTERNAL */
		ADC0.CTRLC |= INTERNAL;
     24c:	90 91 02 06 	lds	r25, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     250:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:59

		/* Configure VREF ADC0 reference */
		VREF.CTRLA |= (mode << VREF_ADC0REFSEL_gp);
     254:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     258:	30 e1       	ldi	r19, 0x10	; 16
     25a:	83 9f       	mul	r24, r19
     25c:	c0 01       	movw	r24, r0
     25e:	11 24       	eor	r1, r1
     260:	82 2b       	or	r24, r18
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:69
		/* Non valid value will set default */
		/* Set ADC reference to INTERNAL */
		ADC0.CTRLC |= INTERNAL;

		/* Configure VREF ADC0 reference */
		VREF.CTRLA |= (INTERNAL0V55 << VREF_ADC0REFSEL_gp);
     262:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:71
	}
}
     266:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:66
	/* Non-standard values / default */
	} else {

		/* Non valid value will set default */
		/* Set ADC reference to INTERNAL */
		ADC0.CTRLC |= INTERNAL;
     268:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     26c:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:69

		/* Configure VREF ADC0 reference */
		VREF.CTRLA |= (INTERNAL0V55 << VREF_ADC0REFSEL_gp);
     270:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     274:	f6 cf       	rjmp	.-20     	; 0x262 <analogReference+0x3e>

00000276 <micros>:
micros():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:130
	SREG = status;

	return m;
}

unsigned long micros() {
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:135
	unsigned long overflows, microseconds;
	uint8_t ticks;

	/* Save current state and disable interrupts */
	uint8_t status = SREG;
     27a:	8f b7       	in	r24, 0x3f	; 63
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:136
	cli();
     27c:	f8 94       	cli
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:139

	/* Get current number of overflows and timer count */
	overflows = timer_overflow_count;
     27e:	20 91 9b 3c 	lds	r18, 0x3C9B	; 0x803c9b <timer_overflow_count>
     282:	30 91 9c 3c 	lds	r19, 0x3C9C	; 0x803c9c <timer_overflow_count+0x1>
     286:	40 91 9d 3c 	lds	r20, 0x3C9D	; 0x803c9d <timer_overflow_count+0x2>
     28a:	50 91 9e 3c 	lds	r21, 0x3C9E	; 0x803c9e <timer_overflow_count+0x3>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:141
	#ifdef MILLIS_USE_TIMERA0
	ticks = 0xFF-TCA0.SPLIT.LCNT;
     28e:	e0 91 20 0a 	lds	r30, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:148
	ticks = _timer->CNTL;
	#endif
	/* If the timer overflow flag is raised, we just missed it,
	increment to account for it, & read new ticks */
	#ifdef MILLIS_USE_TIMERA0
	if(TCA0.SPLIT.INTFLAGS & TCA_SPLIT_LUNF_bm){
     292:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     296:	90 fd       	sbrc	r25, 0
     298:	18 c0       	rjmp	.+48     	; 0x2ca <micros+0x54>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:150
		overflows++;
		ticks = 0xFF-TCA0.SPLIT.LCNT;
     29a:	e0 95       	com	r30
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:161
		ticks = _timer->CNTL;
	}
	#endif

	/* Restore state */
	SREG = status;
     29c:	8f bf       	out	0x3f, r24	; 63
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:164

	/* Return microseconds of up time  (resets every ~70mins) */
	microseconds = ((overflows * microseconds_per_timer_overflow)
     29e:	a0 91 99 3c 	lds	r26, 0x3C99	; 0x803c99 <microseconds_per_timer_overflow>
     2a2:	b0 91 9a 3c 	lds	r27, 0x3C9A	; 0x803c9a <microseconds_per_timer_overflow+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:165
				+ (ticks * microseconds_per_timer_tick));
     2a6:	c0 91 97 3c 	lds	r28, 0x3C97	; 0x803c97 <microseconds_per_timer_tick>
     2aa:	d0 91 98 3c 	lds	r29, 0x3C98	; 0x803c98 <microseconds_per_timer_tick+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:164

	/* Restore state */
	SREG = status;

	/* Return microseconds of up time  (resets every ~70mins) */
	microseconds = ((overflows * microseconds_per_timer_overflow)
     2ae:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__muluhisi3>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:165
				+ (ticks * microseconds_per_timer_tick));
     2b2:	ec 9f       	mul	r30, r28
     2b4:	90 01       	movw	r18, r0
     2b6:	ed 9f       	mul	r30, r29
     2b8:	30 0d       	add	r19, r0
     2ba:	11 24       	eor	r1, r1
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:164

	/* Restore state */
	SREG = status;

	/* Return microseconds of up time  (resets every ~70mins) */
	microseconds = ((overflows * microseconds_per_timer_overflow)
     2bc:	62 0f       	add	r22, r18
     2be:	73 1f       	adc	r23, r19
     2c0:	81 1d       	adc	r24, r1
     2c2:	91 1d       	adc	r25, r1
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:167
				+ (ticks * microseconds_per_timer_tick));
	return microseconds;
}
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:149
	#endif
	/* If the timer overflow flag is raised, we just missed it,
	increment to account for it, & read new ticks */
	#ifdef MILLIS_USE_TIMERA0
	if(TCA0.SPLIT.INTFLAGS & TCA_SPLIT_LUNF_bm){
		overflows++;
     2ca:	2f 5f       	subi	r18, 0xFF	; 255
     2cc:	3f 4f       	sbci	r19, 0xFF	; 255
     2ce:	4f 4f       	sbci	r20, 0xFF	; 255
     2d0:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:150
		ticks = 0xFF-TCA0.SPLIT.LCNT;
     2d2:	e0 91 20 0a 	lds	r30, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     2d6:	e1 cf       	rjmp	.-62     	; 0x29a <micros+0x24>

000002d8 <delay>:
delay():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:170
				+ (ticks * microseconds_per_timer_tick));
	return microseconds;
}

void delay(unsigned long ms)
{
     2d8:	8f 92       	push	r8
     2da:	9f 92       	push	r9
     2dc:	af 92       	push	r10
     2de:	bf 92       	push	r11
     2e0:	cf 92       	push	r12
     2e2:	df 92       	push	r13
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	4b 01       	movw	r8, r22
     2ea:	5c 01       	movw	r10, r24
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:171
	uint32_t start_time = micros(), delay_time = 1000*ms;
     2ec:	0e 94 3b 01 	call	0x276	; 0x276 <micros>
     2f0:	6b 01       	movw	r12, r22
     2f2:	7c 01       	movw	r14, r24
     2f4:	a8 ee       	ldi	r26, 0xE8	; 232
     2f6:	b3 e0       	ldi	r27, 0x03	; 3
     2f8:	a5 01       	movw	r20, r10
     2fa:	94 01       	movw	r18, r8
     2fc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__muluhisi3>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:174

	/* Calculate future time to return */
	uint32_t return_time = start_time + delay_time;
     300:	c6 0e       	add	r12, r22
     302:	d7 1e       	adc	r13, r23
     304:	e8 1e       	adc	r14, r24
     306:	f9 1e       	adc	r15, r25
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:177

	/* If return time overflows */
	if(return_time < delay_time){
     308:	c6 16       	cp	r12, r22
     30a:	d7 06       	cpc	r13, r23
     30c:	e8 06       	cpc	r14, r24
     30e:	f9 06       	cpc	r15, r25
     310:	18 f4       	brcc	.+6      	; 0x318 <delay+0x40>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:179
		/* Wait until micros overflows */
		while(micros() > return_time);
     312:	0e 94 3b 01 	call	0x276	; 0x276 <micros>
     316:	f8 cf       	rjmp	.-16     	; 0x308 <delay+0x30>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:183
	}

	/* Wait until return time */
	while(micros() < return_time);
     318:	0e 94 3b 01 	call	0x276	; 0x276 <micros>
     31c:	6c 15       	cp	r22, r12
     31e:	7d 05       	cpc	r23, r13
     320:	8e 05       	cpc	r24, r14
     322:	9f 05       	cpc	r25, r15
     324:	c8 f3       	brcs	.-14     	; 0x318 <delay+0x40>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:184
}
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	bf 90       	pop	r11
     330:	af 90       	pop	r10
     332:	9f 90       	pop	r9
     334:	8f 90       	pop	r8
     336:	08 95       	ret

00000338 <TwoWire::onReceive(void (*)(int))>:
onReceive():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:314
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
	user_onReceive = function;
     338:	60 93 73 3c 	sts	0x3C73, r22	; 0x803c73 <TwoWire::user_onReceive>
     33c:	70 93 74 3c 	sts	0x3C74, r23	; 0x803c74 <TwoWire::user_onReceive+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:315
}
     340:	08 95       	ret

00000342 <TwoWire::onRequest(void (*)())>:
onRequest():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:320

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
     342:	60 93 71 3c 	sts	0x3C71, r22	; 0x803c71 <TwoWire::user_onRequest>
     346:	70 93 72 3c 	sts	0x3C72, r23	; 0x803c72 <TwoWire::user_onRequest+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:321
}
     34a:	08 95       	ret

0000034c <TWI_MasterWriteRead.part.2>:
TWI_MasterWriteRead.part.2():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:277
 *  \param bytesToRead    Number of bytes to read.
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
uint8_t TWI_MasterWriteRead(uint8_t slave_address,
     34c:	0f 93       	push	r16
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:288
	if(twi_mode != TWI_MODE_MASTER) return false;

	/*Initiate transaction if bus is ready. */
	if (master_trans_status == TWIM_STATUS_READY) {
		
		master_trans_status = TWIM_STATUS_BUSY;
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	90 93 70 3c 	sts	0x3C70, r25	; 0x803c70 <master_trans_status>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:289
		master_result = TWIM_RESULT_UNKNOWN;
     354:	10 92 6f 3c 	sts	0x3C6F, r1	; 0x803c6f <master_result>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:291

		master_writeData = write_data;
     358:	60 93 6d 3c 	sts	0x3C6D, r22	; 0x803c6d <master_writeData>
     35c:	70 93 6e 3c 	sts	0x3C6E, r23	; 0x803c6e <master_writeData+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:293

		master_bytesToWrite = bytes_to_write;
     360:	40 93 6c 3c 	sts	0x3C6C, r20	; 0x803c6c <master_bytesToWrite>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:294
		master_bytesToRead = bytes_to_read;
     364:	20 93 6b 3c 	sts	0x3C6B, r18	; 0x803c6b <master_bytesToRead>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:295
		master_bytesWritten = 0;
     368:	10 92 6a 3c 	sts	0x3C6A, r1	; 0x803c6a <master_bytesWritten>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:296
		master_bytesRead = 0;
     36c:	10 92 69 3c 	sts	0x3C69, r1	; 0x803c69 <master_bytesRead>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:297
		master_sendStop = send_stop;
     370:	00 93 68 3c 	sts	0x3C68, r16	; 0x803c68 <master_sendStop>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:298
		master_slaveAddress = slave_address<<1;
     374:	88 0f       	add	r24, r24
     376:	80 93 67 3c 	sts	0x3C67, r24	; 0x803c67 <master_slaveAddress>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:321
			uint8_t readAddress = ADD_READ_BIT(master_slaveAddress);
			TWI0.MADDR = readAddress;
		}

		else if (master_bytesToWrite == 0 && master_bytesToRead == 0) {
			twi_mode = TWI_MODE_MASTER_TRANSMIT;
     37a:	23 e0       	ldi	r18, 0x03	; 3
     37c:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:315

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (master_bytesToRead > 0) {
			twi_mode = TWI_MODE_MASTER_RECEIVE;
     37e:	44 e0       	ldi	r20, 0x04	; 4
     380:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:305
trigger_action:

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (master_bytesToWrite > 0) {
     382:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <master_bytesToWrite>
     386:	88 23       	and	r24, r24
     388:	41 f0       	breq	.+16     	; 0x39a <TWI_MasterWriteRead.part.2+0x4e>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:321
			uint8_t readAddress = ADD_READ_BIT(master_slaveAddress);
			TWI0.MADDR = readAddress;
		}

		else if (master_bytesToWrite == 0 && master_bytesToRead == 0) {
			twi_mode = TWI_MODE_MASTER_TRANSMIT;
     38a:	20 93 65 3c 	sts	0x3C65, r18	; 0x803c65 <twi_mode>
     38e:	30 93 66 3c 	sts	0x3C66, r19	; 0x803c66 <twi_mode+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:322
			uint8_t writeAddress = ADD_WRITE_BIT(master_slaveAddress);
     392:	80 91 67 3c 	lds	r24, 0x3C67	; 0x803c67 <master_slaveAddress>
     396:	8e 7f       	andi	r24, 0xFE	; 254
     398:	0b c0       	rjmp	.+22     	; 0x3b0 <TWI_MasterWriteRead.part.2+0x64>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:314
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (master_bytesToRead > 0) {
     39a:	80 91 6b 3c 	lds	r24, 0x3C6B	; 0x803c6b <master_bytesToRead>
     39e:	88 23       	and	r24, r24
     3a0:	51 f0       	breq	.+20     	; 0x3b6 <TWI_MasterWriteRead.part.2+0x6a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:315
			twi_mode = TWI_MODE_MASTER_RECEIVE;
     3a2:	40 93 65 3c 	sts	0x3C65, r20	; 0x803c65 <twi_mode>
     3a6:	50 93 66 3c 	sts	0x3C66, r21	; 0x803c66 <twi_mode+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:316
			uint8_t readAddress = ADD_READ_BIT(master_slaveAddress);
     3aa:	80 91 67 3c 	lds	r24, 0x3C67	; 0x803c67 <master_slaveAddress>
     3ae:	81 60       	ori	r24, 0x01	; 1
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:323
		}

		else if (master_bytesToWrite == 0 && master_bytesToRead == 0) {
			twi_mode = TWI_MODE_MASTER_TRANSMIT;
			uint8_t writeAddress = ADD_WRITE_BIT(master_slaveAddress);
			TWI0.MADDR = writeAddress;
     3b0:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     3b4:	08 c0       	rjmp	.+16     	; 0x3c6 <TWI_MasterWriteRead.part.2+0x7a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:320
			twi_mode = TWI_MODE_MASTER_RECEIVE;
			uint8_t readAddress = ADD_READ_BIT(master_slaveAddress);
			TWI0.MADDR = readAddress;
		}

		else if (master_bytesToWrite == 0 && master_bytesToRead == 0) {
     3b6:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <master_bytesToWrite>
     3ba:	81 11       	cpse	r24, r1
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <TWI_MasterWriteRead.part.2+0x7a>
     3be:	80 91 6b 3c 	lds	r24, 0x3C6B	; 0x803c6b <master_bytesToRead>
     3c2:	88 23       	and	r24, r24
     3c4:	11 f3       	breq	.-60     	; 0x38a <TWI_MasterWriteRead.part.2+0x3e>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:327
			uint8_t writeAddress = ADD_WRITE_BIT(master_slaveAddress);
			TWI0.MADDR = writeAddress;
		}

		/* Arduino requires blocking function */
		while(master_result == TWIM_RESULT_UNKNOWN) {}
     3c6:	80 91 6f 3c 	lds	r24, 0x3C6F	; 0x803c6f <master_result>
     3ca:	88 23       	and	r24, r24
     3cc:	e1 f3       	breq	.-8      	; 0x3c6 <TWI_MasterWriteRead.part.2+0x7a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:330

		// in case of arbitration lost, retry sending
		if (master_result == TWIM_RESULT_ARBITRATION_LOST) {
     3ce:	80 91 6f 3c 	lds	r24, 0x3C6F	; 0x803c6f <master_result>
     3d2:	83 30       	cpi	r24, 0x03	; 3
     3d4:	b1 f2       	breq	.-84     	; 0x382 <TWI_MasterWriteRead.part.2+0x36>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:335
			goto trigger_action;
		}

		uint8_t ret = 0;
		if (master_bytesToRead > 0) {
     3d6:	80 91 6b 3c 	lds	r24, 0x3C6B	; 0x803c6b <master_bytesToRead>
     3da:	88 23       	and	r24, r24
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <TWI_MasterWriteRead.part.2+0x9a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:337
			// return bytes really read
			ret = master_bytesRead;
     3de:	80 91 69 3c 	lds	r24, 0x3C69	; 0x803c69 <master_bytesRead>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:347

		return ret;
	} else {
		return 1;
	}
}
     3e2:	0f 91       	pop	r16
     3e4:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:340
		if (master_bytesToRead > 0) {
			// return bytes really read
			ret = master_bytesRead;
		} else {
			// return 0 if success, >0 otherwise
			ret = (master_result == TWIM_RESULT_OK ? 0 : 1);
     3e6:	90 91 6f 3c 	lds	r25, 0x3C6F	; 0x803c6f <master_result>
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	91 30       	cpi	r25, 0x01	; 1
     3ee:	c9 f7       	brne	.-14     	; 0x3e2 <TWI_MasterWriteRead.part.2+0x96>
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	f7 cf       	rjmp	.-18     	; 0x3e2 <TWI_MasterWriteRead.part.2+0x96>

000003f4 <TWI_SlaveTransactionFinished>:
TWI_SlaveTransactionFinished():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:757
 *
 *  \param result  The result of the operation.
 */
void TWI_SlaveTransactionFinished(uint8_t result)
{
	TWI0.SCTRLA |= (TWI_APIEN_bm | TWI_PIEN_bm);
     3f4:	e0 e1       	ldi	r30, 0x10	; 16
     3f6:	f8 e0       	ldi	r31, 0x08	; 8
     3f8:	91 85       	ldd	r25, Z+9	; 0x09
     3fa:	90 66       	ori	r25, 0x60	; 96
     3fc:	91 87       	std	Z+9, r25	; 0x09
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:758
	twi_mode = TWI_MODE_SLAVE;
     3fe:	22 e0       	ldi	r18, 0x02	; 2
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	20 93 65 3c 	sts	0x3C65, r18	; 0x803c65 <twi_mode>
     406:	30 93 66 3c 	sts	0x3C66, r19	; 0x803c66 <twi_mode+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:759
	slave_result = result;
     40a:	80 93 57 3c 	sts	0x3C57, r24	; 0x803c57 <slave_result>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:760
	slave_trans_status = TWIM_STATUS_READY;
     40e:	10 92 56 3c 	sts	0x3C56, r1	; 0x803c56 <slave_trans_status>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:761
}
     412:	08 95       	ret

00000414 <TWI_SlaveAddressMatchHandler>:
TWI_SlaveAddressMatchHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:601
 *  This is the slave address match handler that takes care of responding to
 *  being addressed by a master
 *
 */
void TWI_SlaveAddressMatchHandler(){
	slave_trans_status = TWIS_STATUS_BUSY;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 56 3c 	sts	0x3C56, r24	; 0x803c56 <slave_trans_status>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:602
	slave_result = TWIS_RESULT_UNKNOWN;
     41a:	10 92 57 3c 	sts	0x3C57, r1	; 0x803c57 <slave_result>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:605
	
	/* Send ACK, wait for data interrupt */
	TWI0.SCTRLB = TWI_SCMD_RESPONSE_gc;	
     41e:	93 e0       	ldi	r25, 0x03	; 3
     420:	90 93 1a 08 	sts	0x081A, r25	; 0x80081a <__TEXT_REGION_LENGTH__+0x70081a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:608
	
	/* If Master Read/Slave Write */
	if(TWI0.SSTATUS & TWI_DIR_bm){
     424:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     428:	91 ff       	sbrs	r25, 1
     42a:	10 c0       	rjmp	.+32     	; 0x44c <TWI_SlaveAddressMatchHandler+0x38>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:609
		slave_bytesWritten = 0;
     42c:	10 92 63 3c 	sts	0x3C63, r1	; 0x803c63 <slave_bytesWritten>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:611
		/* Call user function  */
		slave_bytesToWrite = TWI_onSlaveTransmit();	
     430:	e0 91 54 3c 	lds	r30, 0x3C54	; 0x803c54 <TWI_onSlaveTransmit>
     434:	f0 91 55 3c 	lds	r31, 0x3C55	; 0x803c55 <TWI_onSlaveTransmit+0x1>
     438:	09 95       	icall
     43a:	80 93 62 3c 	sts	0x3C62, r24	; 0x803c62 <slave_bytesToWrite>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:612
		twi_mode = TWI_MODE_SLAVE_TRANSMIT;
     43e:	85 e0       	ldi	r24, 0x05	; 5
     440:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:618
	} 
	/* If Master Write/Slave Read */
	else {
		slave_bytesRead = 0;
		slave_callUserReceive = 1;
		twi_mode = TWI_MODE_SLAVE_RECEIVE;
     442:	80 93 65 3c 	sts	0x3C65, r24	; 0x803c65 <twi_mode>
     446:	90 93 66 3c 	sts	0x3C66, r25	; 0x803c66 <twi_mode+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:622
	}
	
	/* Data interrupt to follow... */
}
     44a:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:616
		slave_bytesToWrite = TWI_onSlaveTransmit();	
		twi_mode = TWI_MODE_SLAVE_TRANSMIT;
	} 
	/* If Master Write/Slave Read */
	else {
		slave_bytesRead = 0;
     44c:	10 92 64 3c 	sts	0x3C64, r1	; 0x803c64 <slave_bytesRead>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:617
		slave_callUserReceive = 1;
     450:	80 93 61 3c 	sts	0x3C61, r24	; 0x803c61 <slave_callUserReceive>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:618
		twi_mode = TWI_MODE_SLAVE_RECEIVE;
     454:	86 e0       	ldi	r24, 0x06	; 6
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	f4 cf       	rjmp	.-24     	; 0x442 <TWI_SlaveAddressMatchHandler+0x2e>

0000045a <TwoWire::onRequestService()>:
onRequestService():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:297

// behind the scenes function that is called when data is requested
uint8_t TwoWire::onRequestService(void)
{
	// don't bother if user hasn't registered a callback
	if(!user_onRequest){
     45a:	e0 91 71 3c 	lds	r30, 0x3C71	; 0x803c71 <TwoWire::user_onRequest>
     45e:	f0 91 72 3c 	lds	r31, 0x3C72	; 0x803c72 <TwoWire::user_onRequest+0x1>
     462:	30 97       	sbiw	r30, 0x00	; 0
     464:	41 f0       	breq	.+16     	; 0x476 <TwoWire::onRequestService()+0x1c>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:302
		return 0;
	}
	
	// reset slave write buffer iterator var
	txBufferIndex = 0;
     466:	10 92 53 3c 	sts	0x3C53, r1	; 0x803c53 <TwoWire::txBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:303
	txBufferLength = 0;
     46a:	10 92 52 3c 	sts	0x3C52, r1	; 0x803c52 <TwoWire::txBufferLength>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:306
  
	// alert user program
	user_onRequest();
     46e:	09 95       	icall
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:308

	return txBufferLength;
     470:	80 91 52 3c 	lds	r24, 0x3C52	; 0x803c52 <TwoWire::txBufferLength>
     474:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:298
// behind the scenes function that is called when data is requested
uint8_t TwoWire::onRequestService(void)
{
	// don't bother if user hasn't registered a callback
	if(!user_onRequest){
		return 0;
     476:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:309
  
	// alert user program
	user_onRequest();

	return txBufferLength;
}
     478:	08 95       	ret

0000047a <TwoWire::onReceiveService(int)>:
onReceiveService():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:275

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(int numBytes)
{
	// don't bother if user hasn't registered a callback
	if(!user_onReceive){
     47a:	e0 91 73 3c 	lds	r30, 0x3C73	; 0x803c73 <TwoWire::user_onReceive>
     47e:	f0 91 74 3c 	lds	r31, 0x3C74	; 0x803c74 <TwoWire::user_onReceive+0x1>
     482:	30 97       	sbiw	r30, 0x00	; 0
     484:	59 f0       	breq	.+22     	; 0x49c <TwoWire::onReceiveService(int)+0x22>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:281
		return;
	}
	// don't bother if rx buffer is in use by a master requestFrom() op
	// i know this drops data, but it allows for slight stupidity
	// meaning, they may not have read all the master requestFrom() data yet
	if(rxBufferIndex < rxBufferLength){
     486:	30 91 51 3c 	lds	r19, 0x3C51	; 0x803c51 <TwoWire::rxBufferIndex>
     48a:	20 91 50 3c 	lds	r18, 0x3C50	; 0x803c50 <TwoWire::rxBufferLength>
     48e:	32 17       	cp	r19, r18
     490:	28 f0       	brcs	.+10     	; 0x49c <TwoWire::onReceiveService(int)+0x22>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:286
		return;
	}

	// set rx iterator vars
	rxBufferIndex = 0;
     492:	10 92 51 3c 	sts	0x3C51, r1	; 0x803c51 <TwoWire::rxBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:287
	rxBufferLength = numBytes;
     496:	80 93 50 3c 	sts	0x3C50, r24	; 0x803c50 <TwoWire::rxBufferLength>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:290
	
	// alert user program
	user_onReceive(numBytes);
     49a:	09 94       	ijmp
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:291
}
     49c:	08 95       	ret

0000049e <TwoWire::flush()>:
flush():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:269
// 	rxBufferIndex = 0;
// 	rxBufferLength = 0;
// 	
// 	/* Turn off and on TWI module */
// 	TWI_Flush();
}
     49e:	08 95       	ret

000004a0 <TwoWire::peek()>:
peek():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:244
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
	int value = -1;
  
	if(rxBufferIndex < rxBufferLength){
     4a0:	e0 91 51 3c 	lds	r30, 0x3C51	; 0x803c51 <TwoWire::rxBufferIndex>
     4a4:	80 91 50 3c 	lds	r24, 0x3C50	; 0x803c50 <TwoWire::rxBufferLength>
     4a8:	e8 17       	cp	r30, r24
     4aa:	30 f4       	brcc	.+12     	; 0x4b8 <TwoWire::peek()+0x18>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:245
		value = rxBuffer[rxBufferIndex];
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	e0 5d       	subi	r30, 0xD0	; 208
     4b0:	f3 4c       	sbci	r31, 0xC3	; 195
     4b2:	80 81       	ld	r24, Z
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:242
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
	int value = -1;
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:249
	if(rxBufferIndex < rxBufferLength){
		value = rxBuffer[rxBufferIndex];
	}

	return value;
}
     4bc:	08 95       	ret

000004be <TwoWire::read()>:
read():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:229
int TwoWire::read(void)
{
	int value = -1;
  
	// get each successive byte on each call
	if(rxBufferIndex < rxBufferLength){
     4be:	90 91 51 3c 	lds	r25, 0x3C51	; 0x803c51 <TwoWire::rxBufferIndex>
     4c2:	80 91 50 3c 	lds	r24, 0x3C50	; 0x803c50 <TwoWire::rxBufferLength>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:226
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
	int value = -1;
     4c6:	2f ef       	ldi	r18, 0xFF	; 255
     4c8:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:229
  
	// get each successive byte on each call
	if(rxBufferIndex < rxBufferLength){
     4ca:	98 17       	cp	r25, r24
     4cc:	48 f4       	brcc	.+18     	; 0x4e0 <TwoWire::read()+0x22>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:230
		value = rxBuffer[rxBufferIndex];
     4ce:	e9 2f       	mov	r30, r25
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	e0 5d       	subi	r30, 0xD0	; 208
     4d4:	f3 4c       	sbci	r31, 0xC3	; 195
     4d6:	20 81       	ld	r18, Z
     4d8:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:231
		rxBufferIndex++;
     4da:	9f 5f       	subi	r25, 0xFF	; 255
     4dc:	90 93 51 3c 	sts	0x3C51, r25	; 0x803c51 <TwoWire::rxBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:235
	}

	return value;
}
     4e0:	c9 01       	movw	r24, r18
     4e2:	08 95       	ret

000004e4 <TwoWire::available()>:
available():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:218
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
	return rxBufferLength - rxBufferIndex;
     4e4:	80 91 50 3c 	lds	r24, 0x3C50	; 0x803c50 <TwoWire::rxBufferLength>
     4e8:	90 91 51 3c 	lds	r25, 0x3C51	; 0x803c51 <TwoWire::rxBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:219
}
     4ec:	89 1b       	sub	r24, r25
     4ee:	99 0b       	sbc	r25, r25
     4f0:	08 95       	ret

000004f2 <TwoWire::write(unsigned char const*, unsigned int)>:
write():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:204

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	7c 01       	movw	r14, r24
     504:	8a 01       	movw	r16, r20
     506:	eb 01       	movw	r28, r22
     508:	6b 01       	movw	r12, r22
     50a:	c4 0e       	add	r12, r20
     50c:	d5 1e       	adc	r13, r21
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:206

	for(size_t i = 0; i < quantity; i++){
     50e:	cc 15       	cp	r28, r12
     510:	dd 05       	cpc	r29, r13
     512:	51 f0       	breq	.+20     	; 0x528 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:207
		write(*(data + i));
     514:	69 91       	ld	r22, Y+
     516:	d7 01       	movw	r26, r14
     518:	ed 91       	ld	r30, X+
     51a:	fc 91       	ld	r31, X
     51c:	01 90       	ld	r0, Z+
     51e:	f0 81       	ld	r31, Z
     520:	e0 2d       	mov	r30, r0
     522:	c7 01       	movw	r24, r14
     524:	09 95       	icall
     526:	f3 cf       	rjmp	.-26     	; 0x50e <TwoWire::write(unsigned char const*, unsigned int)+0x1c>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:211
	}

	return quantity;
}
     528:	c8 01       	movw	r24, r16
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	08 95       	ret

0000053c <TwoWire::write(unsigned char)>:
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:185
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
	/* Check if buffer is full */
	if(txBufferLength >= BUFFER_LENGTH){
     53c:	20 91 52 3c 	lds	r18, 0x3C52	; 0x803c52 <TwoWire::txBufferLength>
     540:	20 32       	cpi	r18, 0x20	; 32
     542:	40 f0       	brcs	.+16     	; 0x554 <TwoWire::write(unsigned char)+0x18>
_ZN5Print13setWriteErrorEi():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/api/Print.h:39
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	fc 01       	movw	r30, r24
     54a:	22 83       	std	Z+2, r18	; 0x02
     54c:	33 83       	std	Z+3, r19	; 0x03
write():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:187
	  setWriteError();
	  return 0;
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:191
	}

	/* Put byte in txBuffer */
	txBuffer[txBufferIndex] = data;
     554:	80 91 53 3c 	lds	r24, 0x3C53	; 0x803c53 <TwoWire::txBufferIndex>
     558:	e8 2f       	mov	r30, r24
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	e0 5f       	subi	r30, 0xF0	; 240
     55e:	f3 4c       	sbci	r31, 0xC3	; 195
     560:	60 83       	st	Z, r22
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:192
	txBufferIndex++;
     562:	8f 5f       	subi	r24, 0xFF	; 255
     564:	80 93 53 3c 	sts	0x3C53, r24	; 0x803c53 <TwoWire::txBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:195

	/* Update buffer length */
	txBufferLength = txBufferIndex;
     568:	80 93 52 3c 	sts	0x3C52, r24	; 0x803c52 <TwoWire::txBufferLength>
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:198
	 
	return 1;
}
     570:	08 95       	ret

00000572 <TwoWire::endTransmission()>:
endTransmission():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:176
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     572:	dc 01       	movw	r26, r24
     574:	ed 91       	ld	r30, X+
     576:	fc 91       	ld	r31, X
     578:	06 88       	ldd	r0, Z+22	; 0x16
     57a:	f7 89       	ldd	r31, Z+23	; 0x17
     57c:	e0 2d       	mov	r30, r0
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	09 94       	ijmp

00000582 <TwoWire::endTransmission(bool)>:
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:157
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(bool sendStop)
{
     582:	0f 93       	push	r16
TWI_MasterWriteRead():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:283
                         uint8_t *write_data,
                         uint8_t bytes_to_write,
                         uint8_t bytes_to_read,
						 uint8_t send_stop)
{
	if(twi_mode != TWI_MODE_MASTER) return false;
     584:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <twi_mode>
     588:	90 91 66 3c 	lds	r25, 0x3C66	; 0x803c66 <twi_mode+0x1>
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	a1 f4       	brne	.+40     	; 0x5b8 <TwoWire::endTransmission(bool)+0x36>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:286

	/*Initiate transaction if bus is ready. */
	if (master_trans_status == TWIM_STATUS_READY) {
     590:	80 91 70 3c 	lds	r24, 0x3C70	; 0x803c70 <master_trans_status>
     594:	81 11       	cpse	r24, r1
     596:	12 c0       	rjmp	.+36     	; 0x5bc <TwoWire::endTransmission(bool)+0x3a>
     598:	06 2f       	mov	r16, r22
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	40 91 52 3c 	lds	r20, 0x3C52	; 0x803c52 <TwoWire::txBufferLength>
     5a0:	60 e1       	ldi	r22, 0x10	; 16
     5a2:	7c e3       	ldi	r23, 0x3C	; 60
     5a4:	80 91 0f 3c 	lds	r24, 0x3C0F	; 0x803c0f <TwoWire::txAddress>
     5a8:	0e 94 a6 01 	call	0x34c	; 0x34c <TWI_MasterWriteRead.part.2>
endTransmission():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:162
	// transmit buffer (blocking)
	uint8_t status = TWI_MasterWrite(txAddress, txBuffer, txBufferLength, sendStop);
	
	// reset tx buffer iterator vars
	txBufferIndex = 0;
     5ac:	10 92 53 3c 	sts	0x3C53, r1	; 0x803c53 <TwoWire::txBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:163
	txBufferLength = 0;
     5b0:	10 92 52 3c 	sts	0x3C52, r1	; 0x803c52 <TwoWire::txBufferLength>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:169
	
	// indicate that we are done transmitting
	transmitting = 0;
	
	return status;
}
     5b4:	0f 91       	pop	r16
     5b6:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:283
                         uint8_t *write_data,
                         uint8_t bytes_to_write,
                         uint8_t bytes_to_read,
						 uint8_t send_stop)
{
	if(twi_mode != TWI_MODE_MASTER) return false;
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	f8 cf       	rjmp	.-16     	; 0x5ac <TwoWire::endTransmission(bool)+0x2a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:345
			ret = (master_result == TWIM_RESULT_OK ? 0 : 1);
		}

		return ret;
	} else {
		return 1;
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	f6 cf       	rjmp	.-20     	; 0x5ac <TwoWire::endTransmission(bool)+0x2a>

000005c0 <TwoWire::beginTransmission(unsigned char)>:
beginTransmission():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:132
void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
  // set address of targeted slave
  txAddress = address;
     5c0:	60 93 0f 3c 	sts	0x3C0F, r22	; 0x803c0f <TwoWire::txAddress>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:134
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     5c4:	10 92 53 3c 	sts	0x3C53, r1	; 0x803c53 <TwoWire::txBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:135
  txBufferLength = 0;
     5c8:	10 92 52 3c 	sts	0x3C52, r1	; 0x803c52 <TwoWire::txBufferLength>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:136
}
     5cc:	08 95       	ret

000005ce <TwoWire::requestFrom(unsigned char, unsigned int)>:
requestFrom():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:114
	return bytes_read;
}

uint8_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
	return requestFrom(address, quantity, true);
     5ce:	dc 01       	movw	r26, r24
     5d0:	ed 91       	ld	r30, X+
     5d2:	fc 91       	ld	r31, X
     5d4:	02 8c       	ldd	r0, Z+26	; 0x1a
     5d6:	f3 8d       	ldd	r31, Z+27	; 0x1b
     5d8:	e0 2d       	mov	r30, r0
     5da:	21 e0       	ldi	r18, 0x01	; 1
     5dc:	09 94       	ijmp

000005de <TwoWire::requestFrom(unsigned char, unsigned int, bool)>:
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:98
void TwoWire::setClock(uint32_t clock)
{
	TWI_MasterSetBaud(clock);
}

uint8_t TwoWire::requestFrom(uint8_t address, size_t quantity, bool sendStop) {	
     5de:	0f 93       	push	r16
TWI_MasterRead():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:251
uint8_t TWI_MasterRead(uint8_t slave_address,
					uint8_t* read_data,
					uint8_t bytes_to_read,
					uint8_t send_stop)
{
	master_readData = read_data;
     5e0:	80 e3       	ldi	r24, 0x30	; 48
     5e2:	9c e3       	ldi	r25, 0x3C	; 60
     5e4:	80 93 58 3c 	sts	0x3C58, r24	; 0x803c58 <master_readData>
     5e8:	90 93 59 3c 	sts	0x3C59, r25	; 0x803c59 <master_readData+0x1>
TWI_MasterWriteRead():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:283
                         uint8_t *write_data,
                         uint8_t bytes_to_write,
                         uint8_t bytes_to_read,
						 uint8_t send_stop)
{
	if(twi_mode != TWI_MODE_MASTER) return false;
     5ec:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <twi_mode>
     5f0:	90 91 66 3c 	lds	r25, 0x3C66	; 0x803c66 <twi_mode+0x1>
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	c1 f4       	brne	.+48     	; 0x628 <TwoWire::requestFrom(unsigned char, unsigned int, bool)+0x4a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:286

	/*Initiate transaction if bus is ready. */
	if (master_trans_status == TWIM_STATUS_READY) {
     5f8:	80 91 70 3c 	lds	r24, 0x3C70	; 0x803c70 <master_trans_status>
     5fc:	81 11       	cpse	r24, r1
     5fe:	16 c0       	rjmp	.+44     	; 0x62c <TwoWire::requestFrom(unsigned char, unsigned int, bool)+0x4e>
requestFrom():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:103
	if(quantity > BUFFER_LENGTH){
		quantity = BUFFER_LENGTH;
	}
	
	uint8_t bytes_read = TWI_MasterRead(address, rxBuffer, quantity, sendStop);
     600:	fa 01       	movw	r30, r20
     602:	41 32       	cpi	r20, 0x21	; 33
     604:	51 05       	cpc	r21, r1
     606:	10 f0       	brcs	.+4      	; 0x60c <TwoWire::requestFrom(unsigned char, unsigned int, bool)+0x2e>
     608:	e0 e2       	ldi	r30, 0x20	; 32
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	02 2f       	mov	r16, r18
     60e:	86 2f       	mov	r24, r22
TWI_MasterWriteRead():
     610:	2e 2f       	mov	r18, r30
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	0e 94 a6 01 	call	0x34c	; 0x34c <TWI_MasterWriteRead.part.2>
requestFrom():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:106
	
	/* Initialize read variables */
	rxBufferIndex = 0;
     61c:	10 92 51 3c 	sts	0x3C51, r1	; 0x803c51 <TwoWire::rxBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:107
	rxBufferLength = bytes_read;
     620:	80 93 50 3c 	sts	0x3C50, r24	; 0x803c50 <TwoWire::rxBufferLength>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:110

	return bytes_read;
}
     624:	0f 91       	pop	r16
     626:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:283
                         uint8_t *write_data,
                         uint8_t bytes_to_write,
                         uint8_t bytes_to_read,
						 uint8_t send_stop)
{
	if(twi_mode != TWI_MODE_MASTER) return false;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	f8 cf       	rjmp	.-16     	; 0x61c <TwoWire::requestFrom(unsigned char, unsigned int, bool)+0x3e>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:345
			ret = (master_result == TWIM_RESULT_OK ? 0 : 1);
		}

		return ret;
	} else {
		return 1;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	f6 cf       	rjmp	.-20     	; 0x61c <TwoWire::requestFrom(unsigned char, unsigned int, bool)+0x3e>

00000630 <TwoWire::setClock(unsigned long)>:
setClock():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:94
{
	TWI_Disable();
}

void TwoWire::setClock(uint32_t clock)
{
     630:	8f 92       	push	r8
     632:	9f 92       	push	r9
     634:	af 92       	push	r10
     636:	bf 92       	push	r11
     638:	cf 92       	push	r12
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
TWI_MasterSetBaud():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:188
//		Where T_RISE varies depending on operating frequency...
//			From 1617 DS: 1000ns @ 100kHz / 300ns @ 400kHz / 120ns @ 1MHz

	uint16_t t_rise;
	
	if(frequency < 200000){
     644:	40 34       	cpi	r20, 0x40	; 64
     646:	8d e0       	ldi	r24, 0x0D	; 13
     648:	58 07       	cpc	r21, r24
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	68 07       	cpc	r22, r24
     64e:	71 05       	cpc	r23, r1
     650:	08 f4       	brcc	.+2      	; 0x654 <TwoWire::setClock(unsigned long)+0x24>
     652:	4e c0       	rjmp	.+156    	; 0x6f0 <TwoWire::setClock(unsigned long)+0xc0>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:192
		frequency = 100000;
		t_rise = 1000;
		
	} else if (frequency < 800000){
     654:	41 15       	cp	r20, r1
     656:	85 e3       	ldi	r24, 0x35	; 53
     658:	58 07       	cpc	r21, r24
     65a:	8c e0       	ldi	r24, 0x0C	; 12
     65c:	68 07       	cpc	r22, r24
     65e:	71 05       	cpc	r23, r1
     660:	08 f4       	brcc	.+2      	; 0x664 <TwoWire::setClock(unsigned long)+0x34>
     662:	3f c0       	rjmp	.+126    	; 0x6e2 <TwoWire::setClock(unsigned long)+0xb2>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:196
		frequency = 400000;
		t_rise = 300;	

	} else if (frequency < 1200000){
     664:	40 38       	cpi	r20, 0x80	; 128
     666:	5f 44       	sbci	r21, 0x4F	; 79
     668:	62 41       	sbci	r22, 0x12	; 18
     66a:	71 05       	cpc	r23, r1
     66c:	08 f0       	brcs	.+2      	; 0x670 <TwoWire::setClock(unsigned long)+0x40>
     66e:	40 c0       	rjmp	.+128    	; 0x6f0 <TwoWire::setClock(unsigned long)+0xc0>
setClock():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:198
		frequency = 1000000;
		t_rise = 120;
     670:	c8 e7       	ldi	r28, 0x78	; 120
     672:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:197
	} else if (frequency < 800000){
		frequency = 400000;
		t_rise = 300;	

	} else if (frequency < 1200000){
		frequency = 1000000;
     674:	20 e4       	ldi	r18, 0x40	; 64
     676:	32 e4       	ldi	r19, 0x42	; 66
     678:	4f e0       	ldi	r20, 0x0F	; 15
     67a:	50 e0       	ldi	r21, 0x00	; 0
TWI_MasterSetBaud():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:205
	} else {
		frequency = 100000;
		t_rise = 1000;
	}
	
	uint32_t baud = ((F_CPU_CORRECTED/frequency) - (((F_CPU_CORRECTED*t_rise)/1000)/1000)/1000 - 10)/2;
     67c:	80 90 0a 3c 	lds	r8, 0x3C0A	; 0x803c0a <F_CPU_CORRECTED>
     680:	90 90 0b 3c 	lds	r9, 0x3C0B	; 0x803c0b <F_CPU_CORRECTED+0x1>
     684:	a0 90 0c 3c 	lds	r10, 0x3C0C	; 0x803c0c <F_CPU_CORRECTED+0x2>
     688:	b0 90 0d 3c 	lds	r11, 0x3C0D	; 0x803c0d <F_CPU_CORRECTED+0x3>
     68c:	c5 01       	movw	r24, r10
     68e:	b4 01       	movw	r22, r8
     690:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     694:	69 01       	movw	r12, r18
     696:	7a 01       	movw	r14, r20
     698:	8a e0       	ldi	r24, 0x0A	; 10
     69a:	c8 1a       	sub	r12, r24
     69c:	d1 08       	sbc	r13, r1
     69e:	e1 08       	sbc	r14, r1
     6a0:	f1 08       	sbc	r15, r1
     6a2:	de 01       	movw	r26, r28
     6a4:	a5 01       	movw	r20, r10
     6a6:	94 01       	movw	r18, r8
     6a8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__muluhisi3>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	3a ec       	ldi	r19, 0xCA	; 202
     6b0:	4a e9       	ldi	r20, 0x9A	; 154
     6b2:	5b e3       	ldi	r21, 0x3B	; 59
     6b4:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     6b8:	c2 1a       	sub	r12, r18
     6ba:	d3 0a       	sbc	r13, r19
     6bc:	e4 0a       	sbc	r14, r20
     6be:	f5 0a       	sbc	r15, r21
     6c0:	f6 94       	lsr	r15
     6c2:	e7 94       	ror	r14
     6c4:	d7 94       	ror	r13
     6c6:	c7 94       	ror	r12
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:206
	TWI0.MBAUD = (uint8_t)baud;
     6c8:	c0 92 16 08 	sts	0x0816, r12	; 0x800816 <__TEXT_REGION_LENGTH__+0x700816>
setClock():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:96
	TWI_MasterSetBaud(clock);
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
     6d6:	cf 90       	pop	r12
     6d8:	bf 90       	pop	r11
     6da:	af 90       	pop	r10
     6dc:	9f 90       	pop	r9
     6de:	8f 90       	pop	r8
     6e0:	08 95       	ret
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:194
		frequency = 100000;
		t_rise = 1000;
		
	} else if (frequency < 800000){
		frequency = 400000;
		t_rise = 300;	
     6e2:	cc e2       	ldi	r28, 0x2C	; 44
     6e4:	d1 e0       	ldi	r29, 0x01	; 1
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:193
	if(frequency < 200000){
		frequency = 100000;
		t_rise = 1000;
		
	} else if (frequency < 800000){
		frequency = 400000;
     6e6:	20 e8       	ldi	r18, 0x80	; 128
     6e8:	3a e1       	ldi	r19, 0x1A	; 26
     6ea:	46 e0       	ldi	r20, 0x06	; 6
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	c6 cf       	rjmp	.-116    	; 0x67c <TwoWire::setClock(unsigned long)+0x4c>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:202
		frequency = 1000000;
		t_rise = 120;
		
	} else {
		frequency = 100000;
		t_rise = 1000;
     6f0:	c8 ee       	ldi	r28, 0xE8	; 232
     6f2:	d3 e0       	ldi	r29, 0x03	; 3
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:201
	} else if (frequency < 1200000){
		frequency = 1000000;
		t_rise = 120;
		
	} else {
		frequency = 100000;
     6f4:	20 ea       	ldi	r18, 0xA0	; 160
     6f6:	36 e8       	ldi	r19, 0x86	; 134
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	bf cf       	rjmp	.-130    	; 0x67c <TwoWire::setClock(unsigned long)+0x4c>

000006fe <TwoWire::end()>:
TWI_Disable():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:129
 *
 *  \param frequency				    The required baud.
 */
void TWI_Disable(void)
{
	TWI0.MCTRLA = 0x00;
     6fe:	e0 e1       	ldi	r30, 0x10	; 16
     700:	f8 e0       	ldi	r31, 0x08	; 8
     702:	13 82       	std	Z+3, r1	; 0x03
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:130
	TWI0.MBAUD = 0x00;
     704:	16 82       	std	Z+6, r1	; 0x06
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:131
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	85 83       	std	Z+5, r24	; 0x05
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:132
	TWI0.SADDR = 0x00;
     70a:	14 86       	std	Z+12, r1	; 0x0c
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:133
	TWI0.SCTRLA = 0x00;
     70c:	11 86       	std	Z+9, r1	; 0x09
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:135

	twi_mode = TWI_MODE_UNKNOWN;
     70e:	10 92 65 3c 	sts	0x3C65, r1	; 0x803c65 <twi_mode>
     712:	10 92 66 3c 	sts	0x3C66, r1	; 0x803c66 <twi_mode+0x1>
end():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:91
}

void TwoWire::end(void)
{
	TWI_Disable();
}
     716:	08 95       	ret

00000718 <TwoWire::begin(unsigned char)>:
begin():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:70
	TWI_MasterInit(DEFAULT_FREQUENCY);	
}

void TwoWire::begin(uint8_t address)
{
	rxBufferIndex = 0;
     718:	10 92 51 3c 	sts	0x3C51, r1	; 0x803c51 <TwoWire::rxBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:71
	rxBufferLength = 0;
     71c:	10 92 50 3c 	sts	0x3C50, r1	; 0x803c50 <TwoWire::rxBufferLength>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:73

	txBufferIndex = 0;
     720:	10 92 53 3c 	sts	0x3C53, r1	; 0x803c53 <TwoWire::txBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:74
	txBufferLength = 0;
     724:	10 92 52 3c 	sts	0x3C52, r1	; 0x803c52 <TwoWire::txBufferLength>
TWI_SlaveInit():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:98
 *
 *  \param address				    The TWI Slave's own address.
 */
void TWI_SlaveInit(uint8_t address)
{
	if(twi_mode != TWI_MODE_UNKNOWN) return;
     728:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <twi_mode>
     72c:	90 91 66 3c 	lds	r25, 0x3C66	; 0x803c66 <twi_mode+0x1>
     730:	89 2b       	or	r24, r25
     732:	d9 f4       	brne	.+54     	; 0x76a <TwoWire::begin(unsigned char)+0x52>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:100
	
	twi_mode = TWI_MODE_SLAVE;
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	80 93 65 3c 	sts	0x3C65, r24	; 0x803c65 <twi_mode>
     73c:	90 93 66 3c 	sts	0x3C66, r25	; 0x803c66 <twi_mode+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:102
	
	slave_bytesRead = 0;
     740:	10 92 64 3c 	sts	0x3C64, r1	; 0x803c64 <slave_bytesRead>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:103
	slave_bytesWritten = 0;
     744:	10 92 63 3c 	sts	0x3C63, r1	; 0x803c63 <slave_bytesWritten>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:104
	slave_trans_status = TWIS_STATUS_READY;
     748:	10 92 56 3c 	sts	0x3C56, r1	; 0x803c56 <slave_trans_status>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:105
	slave_result = TWIS_RESULT_UNKNOWN;
     74c:	10 92 57 3c 	sts	0x3C57, r1	; 0x803c57 <slave_result>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:106
	slave_callUserRequest = 0;
     750:	10 92 0e 3c 	sts	0x3C0E, r1	; 0x803c0e <__data_end>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:107
	slave_callUserReceive = 0;
     754:	10 92 61 3c 	sts	0x3C61, r1	; 0x803c61 <slave_callUserReceive>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:109
	
	TWI0.SADDR = address << 1;	
     758:	66 0f       	add	r22, r22
     75a:	60 93 1c 08 	sts	0x081C, r22	; 0x80081c <__TEXT_REGION_LENGTH__+0x70081c>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:110
	TWI0.SCTRLA = TWI_DIEN_bm | TWI_APIEN_bm | TWI_PIEN_bm  | TWI_ENABLE_bm;
     75e:	81 ee       	ldi	r24, 0xE1	; 225
     760:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <__TEXT_REGION_LENGTH__+0x700819>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:113
	
	/* Bus Error Detection circuitry needs Master enabled to work */
	TWI0.MCTRLA = TWI_ENABLE_bm;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
TWI_attachSlaveTxEvent():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:744
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void TWI_attachSlaveTxEvent( uint8_t (*function)(void), uint8_t* write_data ){
  TWI_onSlaveTransmit = function;
     76a:	8d e2       	ldi	r24, 0x2D	; 45
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	80 93 54 3c 	sts	0x3C54, r24	; 0x803c54 <TWI_onSlaveTransmit>
     772:	90 93 55 3c 	sts	0x3C55, r25	; 0x803c55 <TWI_onSlaveTransmit+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:745
  slave_writeData = write_data;
     776:	80 e1       	ldi	r24, 0x10	; 16
     778:	9c e3       	ldi	r25, 0x3C	; 60
     77a:	80 93 5a 3c 	sts	0x3C5A, r24	; 0x803c5a <slave_writeData>
     77e:	90 93 5b 3c 	sts	0x3C5B, r25	; 0x803c5b <slave_writeData+0x1>
TWI_attachSlaveRxEvent():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:732
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void TWI_attachSlaveRxEvent( void (*function)(int), uint8_t *read_data, uint8_t bytes_to_read ){
  TWI_onSlaveReceive = function;
     782:	8d e3       	ldi	r24, 0x3D	; 61
     784:	92 e0       	ldi	r25, 0x02	; 2
     786:	80 93 5f 3c 	sts	0x3C5F, r24	; 0x803c5f <TWI_onSlaveReceive>
     78a:	90 93 60 3c 	sts	0x3C60, r25	; 0x803c60 <TWI_onSlaveReceive+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:733
  slave_readData = read_data;
     78e:	80 e3       	ldi	r24, 0x30	; 48
     790:	9c e3       	ldi	r25, 0x3C	; 60
     792:	80 93 5c 3c 	sts	0x3C5C, r24	; 0x803c5c <slave_readData>
     796:	90 93 5d 3c 	sts	0x3C5D, r25	; 0x803c5d <slave_readData+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:734
  slave_bytesToRead = bytes_to_read;
     79a:	80 e2       	ldi	r24, 0x20	; 32
     79c:	80 93 5e 3c 	sts	0x3C5E, r24	; 0x803c5e <slave_bytesToRead>
begin():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:81
	TWI_SlaveInit(address);
	
	TWI_attachSlaveTxEvent(onRequestService, txBuffer); // default callback must exist
	TWI_attachSlaveRxEvent(onReceiveService, rxBuffer, BUFFER_LENGTH); // default callback must exist
	
}
     7a0:	08 95       	ret

000007a2 <TwoWire::begin()>:
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:58
}

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
     7a2:	8f 92       	push	r8
     7a4:	9f 92       	push	r9
     7a6:	af 92       	push	r10
     7a8:	bf 92       	push	r11
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:59
	rxBufferIndex = 0;
     7b2:	10 92 51 3c 	sts	0x3C51, r1	; 0x803c51 <TwoWire::rxBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:60
	rxBufferLength = 0;
     7b6:	10 92 50 3c 	sts	0x3C50, r1	; 0x803c50 <TwoWire::rxBufferLength>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:62

	txBufferIndex = 0;
     7ba:	10 92 53 3c 	sts	0x3C53, r1	; 0x803c53 <TwoWire::txBufferIndex>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:63
	txBufferLength = 0;
     7be:	10 92 52 3c 	sts	0x3C52, r1	; 0x803c52 <TwoWire::txBufferLength>
TWI_MasterInit():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:65
 *
 *  \param frequency				    The required baud.
 */
void TWI_MasterInit(uint32_t frequency)
{
	if(twi_mode != TWI_MODE_UNKNOWN) return;
     7c2:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <twi_mode>
     7c6:	90 91 66 3c 	lds	r25, 0x3C66	; 0x803c66 <twi_mode+0x1>
     7ca:	89 2b       	or	r24, r25
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <TwoWire::begin()+0x2e>
     7ce:	4b c0       	rjmp	.+150    	; 0x866 <TwoWire::begin()+0xc4>
pinMode():
     7d0:	62 e0       	ldi	r22, 0x02	; 2
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	86 e0       	ldi	r24, 0x06	; 6
     7d6:	0e 94 81 00 	call	0x102	; 0x102 <pinMode.part.1>
     7da:	62 e0       	ldi	r22, 0x02	; 2
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	87 e0       	ldi	r24, 0x07	; 7
     7e0:	0e 94 81 00 	call	0x102	; 0x102 <pinMode.part.1>
TWI_MasterInit():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:75
	pinMode(PIN_WIRE_SCL, INPUT_PULLUP);
#endif
#if defined(TWISPIROUTEA)
	PORTMUX.TWISPIROUTEA |= TWI_MUX;
#endif
	twi_mode = TWI_MODE_MASTER;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	80 93 65 3c 	sts	0x3C65, r24	; 0x803c65 <twi_mode>
     7ec:	90 93 66 3c 	sts	0x3C66, r25	; 0x803c66 <twi_mode+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:77
	
	master_bytesRead = 0;
     7f0:	10 92 69 3c 	sts	0x3C69, r1	; 0x803c69 <master_bytesRead>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:78
	master_bytesWritten = 0;
     7f4:	10 92 6a 3c 	sts	0x3C6A, r1	; 0x803c6a <master_bytesWritten>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:79
	master_trans_status = TWIM_STATUS_READY;
     7f8:	10 92 70 3c 	sts	0x3C70, r1	; 0x803c70 <master_trans_status>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:80
	master_result = TWIM_RESULT_UNKNOWN;
     7fc:	10 92 6f 3c 	sts	0x3C6F, r1	; 0x803c6f <master_result>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:82
	
	TWI0.MCTRLA = TWI_RIEN_bm | TWI_WIEN_bm | TWI_ENABLE_bm;
     800:	81 ec       	ldi	r24, 0xC1	; 193
     802:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
TWI_MasterSetBaud():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:205
	} else {
		frequency = 100000;
		t_rise = 1000;
	}
	
	uint32_t baud = ((F_CPU_CORRECTED/frequency) - (((F_CPU_CORRECTED*t_rise)/1000)/1000)/1000 - 10)/2;
     806:	80 90 0a 3c 	lds	r8, 0x3C0A	; 0x803c0a <F_CPU_CORRECTED>
     80a:	90 90 0b 3c 	lds	r9, 0x3C0B	; 0x803c0b <F_CPU_CORRECTED+0x1>
     80e:	a0 90 0c 3c 	lds	r10, 0x3C0C	; 0x803c0c <F_CPU_CORRECTED+0x2>
     812:	b0 90 0d 3c 	lds	r11, 0x3C0D	; 0x803c0d <F_CPU_CORRECTED+0x3>
     816:	c5 01       	movw	r24, r10
     818:	b4 01       	movw	r22, r8
     81a:	20 ea       	ldi	r18, 0xA0	; 160
     81c:	36 e8       	ldi	r19, 0x86	; 134
     81e:	41 e0       	ldi	r20, 0x01	; 1
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     826:	69 01       	movw	r12, r18
     828:	7a 01       	movw	r14, r20
     82a:	8a e0       	ldi	r24, 0x0A	; 10
     82c:	c8 1a       	sub	r12, r24
     82e:	d1 08       	sbc	r13, r1
     830:	e1 08       	sbc	r14, r1
     832:	f1 08       	sbc	r15, r1
     834:	a8 ee       	ldi	r26, 0xE8	; 232
     836:	b3 e0       	ldi	r27, 0x03	; 3
     838:	a5 01       	movw	r20, r10
     83a:	94 01       	movw	r18, r8
     83c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__muluhisi3>
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	3a ec       	ldi	r19, 0xCA	; 202
     844:	4a e9       	ldi	r20, 0x9A	; 154
     846:	5b e3       	ldi	r21, 0x3B	; 59
     848:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     84c:	c2 1a       	sub	r12, r18
     84e:	d3 0a       	sbc	r13, r19
     850:	e4 0a       	sbc	r14, r20
     852:	f5 0a       	sbc	r15, r21
     854:	f6 94       	lsr	r15
     856:	e7 94       	ror	r14
     858:	d7 94       	ror	r13
     85a:	c7 94       	ror	r12
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:206
	TWI0.MBAUD = (uint8_t)baud;
     85c:	c0 92 16 08 	sts	0x0816, r12	; 0x800816 <__TEXT_REGION_LENGTH__+0x700816>
TWI_MasterInit():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:84
	master_trans_status = TWIM_STATUS_READY;
	master_result = TWIM_RESULT_UNKNOWN;
	
	TWI0.MCTRLA = TWI_RIEN_bm | TWI_WIEN_bm | TWI_ENABLE_bm;
	TWI_MasterSetBaud(frequency);
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
begin():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:66

	TWI_MasterInit(DEFAULT_FREQUENCY);	
}
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	bf 90       	pop	r11
     870:	af 90       	pop	r10
     872:	9f 90       	pop	r9
     874:	8f 90       	pop	r8
     876:	08 95       	ret

00000878 <requestEvent()>:
requestEvent():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:72
char data[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
unsigned int out_len = 8;
unsigned long vbatt, vrpi, temperature;

void requestEvent() 
{
     878:	cf 93       	push	r28
digitalRead():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:210
}

PinStatus digitalRead(uint8_t pin)
{
	/* Get bit mask and check valid pin */
	uint8_t bit_mask = digitalPinToBitMask(pin);
     87a:	e4 ea       	ldi	r30, 0xA4	; 164
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	c4 91       	lpm	r28, Z
requestEvent():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:73
   digitalWrite(PIN_LED, digitalRead(PIN_LED) ? LOW : HIGH);
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	70 e0       	ldi	r23, 0x00	; 0
digitalRead():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:211
	if(bit_mask == NOT_A_PIN || isDoubleBondedActive(pin)) return LOW;
     884:	cf 3f       	cpi	r28, 0xFF	; 255
     886:	91 f0       	breq	.+36     	; 0x8ac <requestEvent()+0x34>
turnOffPWM():
     888:	84 e0       	ldi	r24, 0x04	; 4
     88a:	0e 94 ae 00 	call	0x15c	; 0x15c <turnOffPWM.part.0>
digitalRead():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:218
	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	turnOffPWM(pin);

	/* Get port and check valid port */
	PORT_t *port = digitalPinToPortStruct(pin);
     88e:	e8 e9       	ldi	r30, 0x98	; 152
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	a4 91       	lpm	r26, Z
     894:	80 e2       	ldi	r24, 0x20	; 32
     896:	a8 9f       	mul	r26, r24
     898:	d0 01       	movw	r26, r0
     89a:	11 24       	eor	r1, r1
     89c:	bc 5f       	subi	r27, 0xFC	; 252
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_digital.c:221

	/* Read pin value from PORTx.IN register */
	if(port->IN & bit_mask){
     89e:	18 96       	adiw	r26, 0x08	; 8
     8a0:	ec 91       	ld	r30, X
     8a2:	ec 23       	and	r30, r28
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	09 f0       	breq	.+2      	; 0x8ac <requestEvent()+0x34>
     8aa:	60 e0       	ldi	r22, 0x00	; 0
digitalWrite():
     8ac:	84 e0       	ldi	r24, 0x04	; 4
     8ae:	0e 94 ce 00 	call	0x19c	; 0x19c <digitalWrite.part.2>
write():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/api/Print.h:53
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     8b2:	40 91 08 3c 	lds	r20, 0x3C08	; 0x803c08 <out_len>
     8b6:	50 91 09 3c 	lds	r21, 0x3C09	; 0x803c09 <out_len+0x1>
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	7c e3       	ldi	r23, 0x3C	; 60
     8be:	85 e7       	ldi	r24, 0x75	; 117
     8c0:	9c e3       	ldi	r25, 0x3C	; 60
requestEvent():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:75
   Wire.write(data, out_len);
}
     8c2:	cf 91       	pop	r28
write():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/api/Print.h:53
     8c4:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <TwoWire::write(unsigned char const*, unsigned int)>

000008c8 <receiveEvent(int)>:
receiveEvent():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:79

void receiveEvent(int howMany) 
{
  int reg = Wire.read();
     8c8:	85 e7       	ldi	r24, 0x75	; 117
     8ca:	9c e3       	ldi	r25, 0x3C	; 60
     8cc:	0e 94 5f 02 	call	0x4be	; 0x4be <TwoWire::read()>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:81
  uint16_t crc = 0;
  out_len = 0;
     8d0:	10 92 08 3c 	sts	0x3C08, r1	; 0x803c08 <out_len>
     8d4:	10 92 09 3c 	sts	0x3C09, r1	; 0x803c09 <out_len+0x1>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:83
  
  switch (reg)
     8d8:	83 30       	cpi	r24, 0x03	; 3
     8da:	91 05       	cpc	r25, r1
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <receiveEvent(int)+0x18>
     8de:	5b c0       	rjmp	.+182    	; 0x996 <receiveEvent(int)+0xce>
     8e0:	0c f0       	brlt	.+2      	; 0x8e4 <receiveEvent(int)+0x1c>
     8e2:	32 c0       	rjmp	.+100    	; 0x948 <receiveEvent(int)+0x80>
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	91 05       	cpc	r25, r1
     8e8:	09 f4       	brne	.+2      	; 0x8ec <receiveEvent(int)+0x24>
     8ea:	39 c0       	rjmp	.+114    	; 0x95e <receiveEvent(int)+0x96>
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	91 05       	cpc	r25, r1
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <receiveEvent(int)+0x2c>
     8f2:	44 c0       	rjmp	.+136    	; 0x97c <receiveEvent(int)+0xb4>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:107
      data[out_len++] = temperature & 0xff;
      data[out_len++] = (temperature >> 8) & 0xff;
      break;
  }

  out_len = append_crc(data, out_len);
     8f4:	20 91 08 3c 	lds	r18, 0x3C08	; 0x803c08 <out_len>
     8f8:	30 91 09 3c 	lds	r19, 0x3C09	; 0x803c09 <out_len+0x1>
     8fc:	e0 e0       	ldi	r30, 0x00	; 0
     8fe:	fc e3       	ldi	r31, 0x3C	; 60
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:33
}

unsigned int append_crc(uint8_t* data, uint32_t len)
{
#define CRC_LEN 2
  uint16_t crc = 0;
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
append_crc():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:34
  for (unsigned int i = 0; i < len; ++i)
     904:	af 01       	movw	r20, r30
     906:	40 50       	subi	r20, 0x00	; 0
     908:	5c 43       	sbci	r21, 0x3C	; 60
     90a:	42 17       	cp	r20, r18
     90c:	53 07       	cpc	r21, r19
     90e:	08 f0       	brcs	.+2      	; 0x912 <receiveEvent(int)+0x4a>
     910:	62 c0       	rjmp	.+196    	; 0x9d6 <receiveEvent(int)+0x10e>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:36
  {
    crc = _crc_xmodem_update(crc, data[i]);
     912:	41 91       	ld	r20, Z+
_crc_xmodem_update():
c:\users\pihlstro\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/crc16.h:219
        "eor    %B0,%A0"         "\n\t" /* ret.hi is now ready. */
        "mov    %A0,%1"          "\n\t" /* ret.lo is now ready. */
        : "=d" (__ret), "=d" (__tmp1), "=d" (__tmp2)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     914:	94 27       	eor	r25, r20
     916:	09 2e       	mov	r0, r25
     918:	02 94       	swap	r0
     91a:	40 2d       	mov	r20, r0
     91c:	4f 70       	andi	r20, 0x0F	; 15
     91e:	49 27       	eor	r20, r25
     920:	59 2f       	mov	r21, r25
     922:	50 25       	eor	r21, r0
     924:	55 0f       	add	r21, r21
     926:	50 7e       	andi	r21, 0xE0	; 224
     928:	45 27       	eor	r20, r21
     92a:	50 2d       	mov	r21, r0
     92c:	59 27       	eor	r21, r25
     92e:	50 7f       	andi	r21, 0xF0	; 240
     930:	56 95       	lsr	r21
     932:	09 2e       	mov	r0, r25
     934:	00 0c       	add	r0, r0
     936:	55 1f       	adc	r21, r21
     938:	96 95       	lsr	r25
     93a:	96 95       	lsr	r25
     93c:	96 95       	lsr	r25
     93e:	9f 71       	andi	r25, 0x1F	; 31
     940:	95 27       	eor	r25, r21
     942:	98 27       	eor	r25, r24
     944:	84 2f       	mov	r24, r20
     946:	de cf       	rjmp	.-68     	; 0x904 <receiveEvent(int)+0x3c>
receiveEvent():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:83
{
  int reg = Wire.read();
  uint16_t crc = 0;
  out_len = 0;
  
  switch (reg)
     948:	84 30       	cpi	r24, 0x04	; 4
     94a:	91 05       	cpc	r25, r1
     94c:	81 f1       	breq	.+96     	; 0x9ae <receiveEvent(int)+0xe6>
     94e:	05 97       	sbiw	r24, 0x05	; 5
     950:	09 f0       	breq	.+2      	; 0x954 <receiveEvent(int)+0x8c>
     952:	d0 cf       	rjmp	.-96     	; 0x8f4 <receiveEvent(int)+0x2c>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:102
    case REG_DEBUG_DATA:
      strcpy(data, "moi");
      out_len = strlen(data);
      break;
    case REG_TEMPERATURE:
      data[out_len++] = temperature & 0xff;
     954:	90 91 81 3c 	lds	r25, 0x3C81	; 0x803c81 <temperature>
     958:	80 91 82 3c 	lds	r24, 0x3C82	; 0x803c82 <temperature+0x1>
     95c:	04 c0       	rjmp	.+8      	; 0x966 <receiveEvent(int)+0x9e>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:86
  out_len = 0;
  
  switch (reg)
  {
    case REG_VBATT:
      data[out_len++] = vbatt & 0xff;
     95e:	90 91 89 3c 	lds	r25, 0x3C89	; 0x803c89 <vbatt>
     962:	80 91 8a 3c 	lds	r24, 0x3C8A	; 0x803c8a <vbatt+0x1>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:102
    case REG_DEBUG_DATA:
      strcpy(data, "moi");
      out_len = strlen(data);
      break;
    case REG_TEMPERATURE:
      data[out_len++] = temperature & 0xff;
     966:	90 93 00 3c 	sts	0x3C00, r25	; 0x803c00 <__data_start>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:103
      data[out_len++] = (temperature >> 8) & 0xff;
     96a:	22 e0       	ldi	r18, 0x02	; 2
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	20 93 08 3c 	sts	0x3C08, r18	; 0x803c08 <out_len>
     972:	30 93 09 3c 	sts	0x3C09, r19	; 0x803c09 <out_len+0x1>
     976:	80 93 01 3c 	sts	0x3C01, r24	; 0x803c01 <__data_start+0x1>
     97a:	bc cf       	rjmp	.-136    	; 0x8f4 <receiveEvent(int)+0x2c>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:90
    case REG_VBATT:
      data[out_len++] = vbatt & 0xff;
      data[out_len++] = (vbatt >> 8) & 0xff;
      break;
    case REG_VRPI:
      data[out_len++] = vrpi & 0xff;
     97c:	30 91 85 3c 	lds	r19, 0x3C85	; 0x803c85 <vrpi>
     980:	20 91 86 3c 	lds	r18, 0x3C86	; 0x803c86 <vrpi+0x1>
     984:	30 93 00 3c 	sts	0x3C00, r19	; 0x803c00 <__data_start>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:91
      data[out_len++] = (vrpi >> 8) & 0xff;
     988:	80 93 08 3c 	sts	0x3C08, r24	; 0x803c08 <out_len>
     98c:	90 93 09 3c 	sts	0x3C09, r25	; 0x803c09 <out_len+0x1>
     990:	20 93 01 3c 	sts	0x3C01, r18	; 0x803c01 <__data_start+0x1>
     994:	af cf       	rjmp	.-162    	; 0x8f4 <receiveEvent(int)+0x2c>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:94
      break;
    case REG_STARTUP_REASON:
      data[out_len++] = 2;
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	80 93 00 3c 	sts	0x3C00, r24	; 0x803c00 <__data_start>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:95
      data[out_len++] = 0;
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	80 93 08 3c 	sts	0x3C08, r24	; 0x803c08 <out_len>
     9a4:	90 93 09 3c 	sts	0x3C09, r25	; 0x803c09 <out_len+0x1>
     9a8:	10 92 01 3c 	sts	0x3C01, r1	; 0x803c01 <__data_start+0x1>
     9ac:	a3 cf       	rjmp	.-186    	; 0x8f4 <receiveEvent(int)+0x2c>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:98
      break;
    case REG_DEBUG_DATA:
      strcpy(data, "moi");
     9ae:	60 e4       	ldi	r22, 0x40	; 64
     9b0:	71 e9       	ldi	r23, 0x91	; 145
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	9c e3       	ldi	r25, 0x3C	; 60
     9b6:	0e 94 84 08 	call	0x1108	; 0x1108 <strcpy>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:99
      out_len = strlen(data);
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	9c e3       	ldi	r25, 0x3C	; 60
     9be:	fc 01       	movw	r30, r24
     9c0:	01 90       	ld	r0, Z+
     9c2:	00 20       	and	r0, r0
     9c4:	e9 f7       	brne	.-6      	; 0x9c0 <receiveEvent(int)+0xf8>
     9c6:	cf 01       	movw	r24, r30
     9c8:	81 50       	subi	r24, 0x01	; 1
     9ca:	9c 43       	sbci	r25, 0x3C	; 60
     9cc:	80 93 08 3c 	sts	0x3C08, r24	; 0x803c08 <out_len>
     9d0:	90 93 09 3c 	sts	0x3C09, r25	; 0x803c09 <out_len+0x1>
     9d4:	8f cf       	rjmp	.-226    	; 0x8f4 <receiveEvent(int)+0x2c>
append_crc():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:39
  for (unsigned int i = 0; i < len; ++i)
  {
    crc = _crc_xmodem_update(crc, data[i]);
  }
  
  data[len] = crc & 0xff;
     9d6:	f9 01       	movw	r30, r18
     9d8:	e0 50       	subi	r30, 0x00	; 0
     9da:	f4 4c       	sbci	r31, 0xC4	; 196
     9dc:	80 83       	st	Z, r24
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:40
  data[len + 1] = (crc >> 8) & 0xff; 
     9de:	f9 01       	movw	r30, r18
     9e0:	ef 5f       	subi	r30, 0xFF	; 255
     9e2:	f3 4c       	sbci	r31, 0xC3	; 195
     9e4:	90 83       	st	Z, r25
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:41
  return len + CRC_LEN;
     9e6:	2e 5f       	subi	r18, 0xFE	; 254
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
receiveEvent():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:107
      data[out_len++] = temperature & 0xff;
      data[out_len++] = (temperature >> 8) & 0xff;
      break;
  }

  out_len = append_crc(data, out_len);
     9ea:	20 93 08 3c 	sts	0x3C08, r18	; 0x803c08 <out_len>
     9ee:	30 93 09 3c 	sts	0x3C09, r19	; 0x803c09 <out_len+0x1>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:108
}
     9f2:	08 95       	ret

000009f4 <__vector_8>:
__vector_8():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:89
ISR(TCB3_INT_vect)
#else
// fallback to TCB0 (every platform has it)
ISR(TCB0_INT_vect)
#endif
{
     9f4:	1f 92       	push	r1
     9f6:	0f 92       	push	r0
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	0f 92       	push	r0
     9fc:	11 24       	eor	r1, r1
     9fe:	2f 93       	push	r18
     a00:	3f 93       	push	r19
     a02:	4f 93       	push	r20
     a04:	5f 93       	push	r21
     a06:	6f 93       	push	r22
     a08:	7f 93       	push	r23
     a0a:	8f 93       	push	r24
     a0c:	9f 93       	push	r25
     a0e:	af 93       	push	r26
     a10:	bf 93       	push	r27
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:92
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	uint32_t m = timer_millis;
     a12:	40 91 93 3c 	lds	r20, 0x3C93	; 0x803c93 <timer_millis>
     a16:	50 91 94 3c 	lds	r21, 0x3C94	; 0x803c94 <timer_millis+0x1>
     a1a:	60 91 95 3c 	lds	r22, 0x3C95	; 0x803c95 <timer_millis+0x2>
     a1e:	70 91 96 3c 	lds	r23, 0x3C96	; 0x803c96 <timer_millis+0x3>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:93
	uint16_t f = timer_fract;
     a22:	80 91 91 3c 	lds	r24, 0x3C91	; 0x803c91 <timer_fract>
     a26:	90 91 92 3c 	lds	r25, 0x3C92	; 0x803c92 <timer_fract+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:94
	m += millis_inc;
     a2a:	20 91 8f 3c 	lds	r18, 0x3C8F	; 0x803c8f <millis_inc>
     a2e:	30 91 90 3c 	lds	r19, 0x3C90	; 0x803c90 <millis_inc+0x1>
     a32:	42 0f       	add	r20, r18
     a34:	53 1f       	adc	r21, r19
     a36:	61 1d       	adc	r22, r1
     a38:	71 1d       	adc	r23, r1
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:95
	f += fract_inc;
     a3a:	20 91 8d 3c 	lds	r18, 0x3C8D	; 0x803c8d <fract_inc>
     a3e:	30 91 8e 3c 	lds	r19, 0x3C8E	; 0x803c8e <fract_inc+0x1>
     a42:	82 0f       	add	r24, r18
     a44:	93 1f       	adc	r25, r19
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:96
	if (f >= FRACT_MAX) {
     a46:	88 3e       	cpi	r24, 0xE8	; 232
     a48:	23 e0       	ldi	r18, 0x03	; 3
     a4a:	92 07       	cpc	r25, r18
     a4c:	30 f0       	brcs	.+12     	; 0xa5a <__vector_8+0x66>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:98

		f -= FRACT_MAX;
     a4e:	88 5e       	subi	r24, 0xE8	; 232
     a50:	93 40       	sbci	r25, 0x03	; 3
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:99
		m += 1;
     a52:	4f 5f       	subi	r20, 0xFF	; 255
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	6f 4f       	sbci	r22, 0xFF	; 255
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:102
	}

	timer_fract = f;
     a5a:	80 93 91 3c 	sts	0x3C91, r24	; 0x803c91 <timer_fract>
     a5e:	90 93 92 3c 	sts	0x3C92, r25	; 0x803c92 <timer_fract+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:103
	timer_millis = m;
     a62:	40 93 93 3c 	sts	0x3C93, r20	; 0x803c93 <timer_millis>
     a66:	50 93 94 3c 	sts	0x3C94, r21	; 0x803c94 <timer_millis+0x1>
     a6a:	60 93 95 3c 	sts	0x3C95, r22	; 0x803c95 <timer_millis+0x2>
     a6e:	70 93 96 3c 	sts	0x3C96, r23	; 0x803c96 <timer_millis+0x3>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:104
	timer_overflow_count++;
     a72:	80 91 9b 3c 	lds	r24, 0x3C9B	; 0x803c9b <timer_overflow_count>
     a76:	90 91 9c 3c 	lds	r25, 0x3C9C	; 0x803c9c <timer_overflow_count+0x1>
     a7a:	a0 91 9d 3c 	lds	r26, 0x3C9D	; 0x803c9d <timer_overflow_count+0x2>
     a7e:	b0 91 9e 3c 	lds	r27, 0x3C9E	; 0x803c9e <timer_overflow_count+0x3>
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	a1 1d       	adc	r26, r1
     a86:	b1 1d       	adc	r27, r1
     a88:	80 93 9b 3c 	sts	0x3C9B, r24	; 0x803c9b <timer_overflow_count>
     a8c:	90 93 9c 3c 	sts	0x3C9C, r25	; 0x803c9c <timer_overflow_count+0x1>
     a90:	a0 93 9d 3c 	sts	0x3C9D, r26	; 0x803c9d <timer_overflow_count+0x2>
     a94:	b0 93 9e 3c 	sts	0x3C9E, r27	; 0x803c9e <timer_overflow_count+0x3>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:108

	/* Clear flag */
	#ifdef MILLIS_USE_TIMERA0
	TCA0.SPLIT.INTFLAGS = TCA_SPLIT_LUNF_bm;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:112
	#else //timerb
	_timer->INTFLAGS = TCB_CAPT_bm;
	#endif
}
     a9e:	bf 91       	pop	r27
     aa0:	af 91       	pop	r26
     aa2:	9f 91       	pop	r25
     aa4:	8f 91       	pop	r24
     aa6:	7f 91       	pop	r23
     aa8:	6f 91       	pop	r22
     aaa:	5f 91       	pop	r21
     aac:	4f 91       	pop	r20
     aae:	3f 91       	pop	r19
     ab0:	2f 91       	pop	r18
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <__vector_24>:
__vector_24():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:767

ISR(TWI0_TWIM_vect){
	TWI_MasterInterruptHandler();
}

ISR(TWI0_TWIS_vect){
     abc:	1f 92       	push	r1
     abe:	0f 92       	push	r0
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	2f 93       	push	r18
     ac8:	3f 93       	push	r19
     aca:	4f 93       	push	r20
     acc:	5f 93       	push	r21
     ace:	6f 93       	push	r22
     ad0:	7f 93       	push	r23
     ad2:	8f 93       	push	r24
     ad4:	9f 93       	push	r25
     ad6:	af 93       	push	r26
     ad8:	bf 93       	push	r27
     ada:	cf 93       	push	r28
     adc:	ef 93       	push	r30
     ade:	ff 93       	push	r31
TWI_SlaveInterruptHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:529
 *
 *  Check current status and calls the appropriate handler.
 *
 */
void TWI_SlaveInterruptHandler(){
	uint8_t currentStatus = TWI0.SSTATUS;
     ae0:	c0 91 1b 08 	lds	r28, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:532
	
	/* If bus error */
	if(currentStatus & TWI_BUSERR_bm){
     ae4:	c2 ff       	sbrs	r28, 2
     ae6:	0a c0       	rjmp	.+20     	; 0xafc <__vector_24+0x40>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:533
		slave_bytesRead = 0;
     ae8:	10 92 64 3c 	sts	0x3C64, r1	; 0x803c64 <slave_bytesRead>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:534
		slave_bytesWritten = 0;
     aec:	10 92 63 3c 	sts	0x3C63, r1	; 0x803c63 <slave_bytesWritten>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:535
		slave_bytesToWrite = 0;
     af0:	10 92 62 3c 	sts	0x3C62, r1	; 0x803c62 <slave_bytesToWrite>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:536
		TWI_SlaveTransactionFinished(TWIS_RESULT_BUS_ERROR);
     af4:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:590
		}
	}
	
	/* If unexpected state */
	else {
		TWI_SlaveTransactionFinished(TWIS_RESULT_FAIL);
     af6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <TWI_SlaveTransactionFinished>
     afa:	14 c0       	rjmp	.+40     	; 0xb24 <__vector_24+0x68>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:540
		slave_bytesToWrite = 0;
		TWI_SlaveTransactionFinished(TWIS_RESULT_BUS_ERROR);
	}
	
	/* If Address or Stop */
	else if(currentStatus & TWI_APIF_bm){
     afc:	c6 ff       	sbrs	r28, 6
     afe:	2f c0       	rjmp	.+94     	; 0xb5e <__vector_24+0xa2>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:545
		
		/* Call user onReceive function if end of Master Write/Slave Read.
		 * This should be hit when there is a STOP or REPSTART 
		 */
		if(slave_callUserReceive == 1){
     b00:	80 91 61 3c 	lds	r24, 0x3C61	; 0x803c61 <slave_callUserReceive>
     b04:	81 30       	cpi	r24, 0x01	; 1
     b06:	51 f4       	brne	.+20     	; 0xb1c <__vector_24+0x60>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:546
			TWI_onSlaveReceive(slave_bytesRead);
     b08:	80 91 64 3c 	lds	r24, 0x3C64	; 0x803c64 <slave_bytesRead>
     b0c:	e0 91 5f 3c 	lds	r30, 0x3C5F	; 0x803c5f <TWI_onSlaveReceive>
     b10:	f0 91 60 3c 	lds	r31, 0x3C60	; 0x803c60 <TWI_onSlaveReceive+0x1>
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	09 95       	icall
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:547
			slave_callUserReceive = 0;
     b18:	10 92 61 3c 	sts	0x3C61, r1	; 0x803c61 <slave_callUserReceive>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:551
		}
		
		/* If address match */
		if(currentStatus & TWI_AP_bm){
     b1c:	c0 ff       	sbrs	r28, 0
     b1e:	14 c0       	rjmp	.+40     	; 0xb48 <__vector_24+0x8c>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:552
			TWI_SlaveAddressMatchHandler();	
     b20:	0e 94 0a 02 	call	0x414	; 0x414 <TWI_SlaveAddressMatchHandler>
__vector_24():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:769
	TWI_MasterInterruptHandler();
}

ISR(TWI0_TWIS_vect){
	TWI_SlaveInterruptHandler();
     b24:	ff 91       	pop	r31
     b26:	ef 91       	pop	r30
     b28:	cf 91       	pop	r28
     b2a:	bf 91       	pop	r27
     b2c:	af 91       	pop	r26
     b2e:	9f 91       	pop	r25
     b30:	8f 91       	pop	r24
     b32:	7f 91       	pop	r23
     b34:	6f 91       	pop	r22
     b36:	5f 91       	pop	r21
     b38:	4f 91       	pop	r20
     b3a:	3f 91       	pop	r19
     b3c:	2f 91       	pop	r18
     b3e:	0f 90       	pop	r0
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	0f 90       	pop	r0
     b44:	1f 90       	pop	r1
     b46:	18 95       	reti
TWI_SlaveStopHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:630
 *
 */
void TWI_SlaveStopHandler(){
	
	/* Clear APIF, don't ACK or NACK */
	TWI0.SSTATUS = TWI_APIF_bm;
     b48:	80 e4       	ldi	r24, 0x40	; 64
     b4a:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:632
	
	TWI_SlaveTransactionFinished(TWIS_RESULT_OK);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <TWI_SlaveTransactionFinished>
TWI_SlaveInterruptHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:563
			
			/* If CLKHOLD is high, we have missed an address match 
			  from a fast start after stop. 
			  Because the flag is shared we need to handle this here.
			*/
			if(TWI0.SSTATUS & TWI_CLKHOLD_bm){
     b54:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     b58:	85 ff       	sbrs	r24, 5
     b5a:	e4 cf       	rjmp	.-56     	; 0xb24 <__vector_24+0x68>
     b5c:	e1 cf       	rjmp	.-62     	; 0xb20 <__vector_24+0x64>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:572
			}
		}
	}
	
	/* If Data Interrupt */
	else if (currentStatus & TWI_DIF_bm){
     b5e:	c7 ff       	sbrs	r28, 7
     b60:	5c c0       	rjmp	.+184    	; 0xc1a <__vector_24+0x15e>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:575
		
		/* If collision flag is raised, slave transmit unsuccessful */
		if (currentStatus & TWI_COLL_bm){
     b62:	c3 ff       	sbrs	r28, 3
     b64:	08 c0       	rjmp	.+16     	; 0xb76 <__vector_24+0xba>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:576
			slave_bytesRead = 0;
     b66:	10 92 64 3c 	sts	0x3C64, r1	; 0x803c64 <slave_bytesRead>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:577
			slave_bytesWritten = 0;
     b6a:	10 92 63 3c 	sts	0x3C63, r1	; 0x803c63 <slave_bytesWritten>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:578
			slave_bytesToWrite = 0;
     b6e:	10 92 62 3c 	sts	0x3C62, r1	; 0x803c62 <slave_bytesToWrite>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:579
			TWI_SlaveTransactionFinished(TWIS_RESULT_TRANSMIT_COLLISION);
     b72:	83 e0       	ldi	r24, 0x03	; 3
     b74:	c0 cf       	rjmp	.-128    	; 0xaf6 <__vector_24+0x3a>
TWI_SlaveDataHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:645
 *
 */
void TWI_SlaveDataHandler(){
	
	/* Enable stop interrupt */
	TWI0.SCTRLA |= (TWI_APIEN_bm | TWI_PIEN_bm);	
     b76:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <__TEXT_REGION_LENGTH__+0x700819>
     b7a:	80 66       	ori	r24, 0x60	; 96
     b7c:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <__TEXT_REGION_LENGTH__+0x700819>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:648
	
	/* If Master Read/Slave Write */
	if(TWI0.SSTATUS & TWI_DIR_bm){
     b80:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     b84:	81 ff       	sbrs	r24, 1
     b86:	2c c0       	rjmp	.+88     	; 0xbe0 <__vector_24+0x124>
TWI_SlaveWriteHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:669
 *
 */
void TWI_SlaveWriteHandler(){
	
	/* If NACK, slave write transaction finished */
	if((slave_bytesWritten > 0) && (TWI0.SSTATUS & TWI_RXACK_bm)){
     b88:	80 91 63 3c 	lds	r24, 0x3C63	; 0x803c63 <slave_bytesWritten>
     b8c:	88 23       	and	r24, r24
     b8e:	49 f0       	breq	.+18     	; 0xba2 <__vector_24+0xe6>
     b90:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     b94:	84 ff       	sbrs	r24, 4
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <__vector_24+0xe6>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:671

		TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__TEXT_REGION_LENGTH__+0x70081a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:672
		TWI_SlaveTransactionFinished(TWIS_RESULT_OK);
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	aa cf       	rjmp	.-172    	; 0xaf6 <__vector_24+0x3a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:678
	}
	
	/* If ACK, master expects more data */
	else {		

		if(slave_bytesWritten < slave_bytesToWrite){
     ba2:	90 91 63 3c 	lds	r25, 0x3C63	; 0x803c63 <slave_bytesWritten>
     ba6:	80 91 62 3c 	lds	r24, 0x3C62	; 0x803c62 <slave_bytesToWrite>
     baa:	98 17       	cp	r25, r24
     bac:	a8 f4       	brcc	.+42     	; 0xbd8 <__vector_24+0x11c>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:679
			uint8_t data = slave_writeData[slave_bytesWritten];
     bae:	e0 91 63 3c 	lds	r30, 0x3C63	; 0x803c63 <slave_bytesWritten>
     bb2:	80 91 5a 3c 	lds	r24, 0x3C5A	; 0x803c5a <slave_writeData>
     bb6:	90 91 5b 3c 	lds	r25, 0x3C5B	; 0x803c5b <slave_writeData+0x1>
     bba:	e8 0f       	add	r30, r24
     bbc:	f9 2f       	mov	r31, r25
     bbe:	f1 1d       	adc	r31, r1
     bc0:	80 81       	ld	r24, Z
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:680
			TWI0.SDATA = data;
     bc2:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <__TEXT_REGION_LENGTH__+0x70081d>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:681
			slave_bytesWritten++;	
     bc6:	80 91 63 3c 	lds	r24, 0x3C63	; 0x803c63 <slave_bytesWritten>
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	80 93 63 3c 	sts	0x3C63, r24	; 0x803c63 <slave_bytesWritten>
TWI_SlaveReadHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:715
		uint8_t data = TWI0.SDATA;
		slave_readData[slave_bytesRead] = data;
		slave_bytesRead++;
		
		/* Send ACK and wait for data interrupt */
		TWI0.SCTRLB = TWI_SCMD_RESPONSE_gc;		
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__TEXT_REGION_LENGTH__+0x70081a>
     bd6:	a6 cf       	rjmp	.-180    	; 0xb24 <__vector_24+0x68>
TWI_SlaveWriteHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:690
			
		} 
		
		/* If buffer overflow */
		else {
			TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__TEXT_REGION_LENGTH__+0x70081a>
     bde:	8b cf       	rjmp	.-234    	; 0xaf6 <__vector_24+0x3a>
TWI_SlaveReadHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:707
 *
 */
void TWI_SlaveReadHandler(){
		
	/* If free space in buffer */
	if(slave_bytesRead < slave_bytesToRead){
     be0:	90 91 64 3c 	lds	r25, 0x3C64	; 0x803c64 <slave_bytesRead>
     be4:	80 91 5e 3c 	lds	r24, 0x3C5E	; 0x803c5e <slave_bytesToRead>
     be8:	98 17       	cp	r25, r24
     bea:	90 f4       	brcc	.+36     	; 0xc10 <__vector_24+0x154>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:710
		
		/* Fetch data */
		uint8_t data = TWI0.SDATA;
     bec:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <__TEXT_REGION_LENGTH__+0x70081d>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:711
		slave_readData[slave_bytesRead] = data;
     bf0:	e0 91 64 3c 	lds	r30, 0x3C64	; 0x803c64 <slave_bytesRead>
     bf4:	20 91 5c 3c 	lds	r18, 0x3C5C	; 0x803c5c <slave_readData>
     bf8:	30 91 5d 3c 	lds	r19, 0x3C5D	; 0x803c5d <slave_readData+0x1>
     bfc:	e2 0f       	add	r30, r18
     bfe:	f3 2f       	mov	r31, r19
     c00:	f1 1d       	adc	r31, r1
     c02:	80 83       	st	Z, r24
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:712
		slave_bytesRead++;
     c04:	80 91 64 3c 	lds	r24, 0x3C64	; 0x803c64 <slave_bytesRead>
     c08:	8f 5f       	subi	r24, 0xFF	; 255
     c0a:	80 93 64 3c 	sts	0x3C64, r24	; 0x803c64 <slave_bytesRead>
     c0e:	e0 cf       	rjmp	.-64     	; 0xbd0 <__vector_24+0x114>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:720
		TWI0.SCTRLB = TWI_SCMD_RESPONSE_gc;		
	}
	/* If buffer overflow, send NACK and wait for next START. 
		Set result buffer overflow */
	else {
		TWI0.SCTRLB = TWI_ACKACT_bm | TWI_SCMD_COMPTRANS_gc;
     c10:	86 e0       	ldi	r24, 0x06	; 6
     c12:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__TEXT_REGION_LENGTH__+0x70081a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:721
		TWI_SlaveTransactionFinished(TWIS_RESULT_BUFFER_OVERFLOW);
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	6e cf       	rjmp	.-292    	; 0xaf6 <__vector_24+0x3a>
TWI_SlaveInterruptHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:590
		}
	}
	
	/* If unexpected state */
	else {
		TWI_SlaveTransactionFinished(TWIS_RESULT_FAIL);
     c1a:	85 e0       	ldi	r24, 0x05	; 5
     c1c:	6c cf       	rjmp	.-296    	; 0xaf6 <__vector_24+0x3a>

00000c1e <__vector_25>:
__vector_25():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:763
	twi_mode = TWI_MODE_SLAVE;
	slave_result = result;
	slave_trans_status = TWIM_STATUS_READY;
}

ISR(TWI0_TWIM_vect){
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	8f 93       	push	r24
     c2e:	9f 93       	push	r25
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
TWI_MasterInterruptHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:357
 *  Check current status and calls the appropriate handler.
 *
 */
void TWI_MasterInterruptHandler()
{
	uint8_t currentStatus = TWI0.MSTATUS;
     c34:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:360

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_ARBLOST_bm) ||
     c38:	98 2f       	mov	r25, r24
     c3a:	9c 70       	andi	r25, 0x0C	; 12
     c3c:	e1 f0       	breq	.+56     	; 0xc76 <__vector_25+0x58>
TWI_MasterArbitrationLostBusErrorHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:389
 *  Handles TWI responses to lost arbitration and bus error.
 *
 */
void TWI_MasterArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWI0.MSTATUS;
     c3e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:393

	/* If bus error. */
	if (currentStatus & TWI_BUSERR_bm) {
		master_result = TWIM_RESULT_BUS_ERROR;
     c42:	94 e0       	ldi	r25, 0x04	; 4
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:392
void TWI_MasterArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWI0.MSTATUS;

	/* If bus error. */
	if (currentStatus & TWI_BUSERR_bm) {
     c44:	82 ff       	sbrs	r24, 2
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:397
		master_result = TWIM_RESULT_BUS_ERROR;
	}
	/* If arbitration lost. */
	else {
		master_result = TWIM_RESULT_ARBITRATION_LOST;
     c46:	93 e0       	ldi	r25, 0x03	; 3
     c48:	90 93 6f 3c 	sts	0x3C6F, r25	; 0x803c6f <master_result>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:401
	}

	/* Clear all flags, abort operation */
	TWI0.MSTATUS = currentStatus;
     c4c:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:404

	/* Wait for a new operation */	
	twi_mode = TWI_MODE_MASTER;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	80 93 65 3c 	sts	0x3C65, r24	; 0x803c65 <twi_mode>
     c58:	90 93 66 3c 	sts	0x3C66, r25	; 0x803c66 <twi_mode+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:405
	master_trans_status = TWIM_STATUS_READY;
     c5c:	10 92 70 3c 	sts	0x3C70, r1	; 0x803c70 <master_trans_status>
__vector_25():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:765
	slave_trans_status = TWIM_STATUS_READY;
}

ISR(TWI0_TWIM_vect){
	TWI_MasterInterruptHandler();
}
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	3f 91       	pop	r19
     c6a:	2f 91       	pop	r18
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti
TWI_MasterInterruptHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:367

		TWI_MasterArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_WIF_bm) {
     c76:	86 ff       	sbrs	r24, 6
     c78:	4e c0       	rjmp	.+156    	; 0xd16 <__vector_25+0xf8>
TWI_MasterWriteHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:417
 *
 */
void TWI_MasterWriteHandler()
{
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = master_bytesToWrite;
     c7a:	20 91 6c 3c 	lds	r18, 0x3C6C	; 0x803c6c <master_bytesToWrite>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:418
	uint8_t bytesToRead   = master_bytesToRead;
     c7e:	90 91 6b 3c 	lds	r25, 0x3C6B	; 0x803c6b <master_bytesToRead>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:421

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (TWI0.MSTATUS & TWI_RXACK_bm) {
     c82:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     c86:	84 ff       	sbrs	r24, 4
     c88:	15 c0       	rjmp	.+42     	; 0xcb4 <__vector_25+0x96>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:422
		if(master_sendStop){
     c8a:	80 91 68 3c 	lds	r24, 0x3C68	; 0x803c68 <master_sendStop>
     c8e:	88 23       	and	r24, r24
     c90:	79 f0       	breq	.+30     	; 0xcb0 <__vector_25+0x92>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:423
			TWI0.MCTRLB = TWI_MCMD_STOP_gc;
     c92:	83 e0       	ldi	r24, 0x03	; 3
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:425
		} else {
			TWI0.MCTRLB = TWI_MCMD_REPSTART_gc;
     c94:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
TWI_MasterTransactionFinished():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:517
 *
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(uint8_t result)
{
	master_result = result;
     c98:	85 e0       	ldi	r24, 0x05	; 5
     c9a:	80 93 6f 3c 	sts	0x3C6F, r24	; 0x803c6f <master_result>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:518
	master_trans_status = TWIM_STATUS_READY;
     c9e:	10 92 70 3c 	sts	0x3C70, r1	; 0x803c70 <master_trans_status>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:519
	twi_mode = TWI_MODE_MASTER;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	80 93 65 3c 	sts	0x3C65, r24	; 0x803c65 <twi_mode>
     caa:	90 93 66 3c 	sts	0x3C66, r25	; 0x803c66 <twi_mode+0x1>
     cae:	d8 cf       	rjmp	.-80     	; 0xc60 <__vector_25+0x42>
TWI_MasterWriteHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:425
	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (TWI0.MSTATUS & TWI_RXACK_bm) {
		if(master_sendStop){
			TWI0.MCTRLB = TWI_MCMD_STOP_gc;
		} else {
			TWI0.MCTRLB = TWI_MCMD_REPSTART_gc;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	f0 cf       	rjmp	.-32     	; 0xc94 <__vector_25+0x76>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:432
		}
		TWI_MasterTransactionFinished(TWIM_RESULT_NACK_RECEIVED);
	}

	/* If more bytes to write, send data. */
	else if (master_bytesWritten < bytesToWrite) {
     cb4:	80 91 6a 3c 	lds	r24, 0x3C6A	; 0x803c6a <master_bytesWritten>
     cb8:	82 17       	cp	r24, r18
     cba:	90 f4       	brcc	.+36     	; 0xce0 <__vector_25+0xc2>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:433
		uint8_t data = master_writeData[master_bytesWritten];
     cbc:	e0 91 6a 3c 	lds	r30, 0x3C6A	; 0x803c6a <master_bytesWritten>
     cc0:	80 91 6d 3c 	lds	r24, 0x3C6D	; 0x803c6d <master_writeData>
     cc4:	90 91 6e 3c 	lds	r25, 0x3C6E	; 0x803c6e <master_writeData+0x1>
     cc8:	e8 0f       	add	r30, r24
     cca:	f9 2f       	mov	r31, r25
     ccc:	f1 1d       	adc	r31, r1
     cce:	80 81       	ld	r24, Z
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:434
		TWI0.MDATA = data;
     cd0:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:435
		master_bytesWritten++;
     cd4:	80 91 6a 3c 	lds	r24, 0x3C6A	; 0x803c6a <master_bytesWritten>
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	80 93 6a 3c 	sts	0x3C6A, r24	; 0x803c6a <master_bytesWritten>
     cde:	c0 cf       	rjmp	.-128    	; 0xc60 <__vector_25+0x42>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:441
	}

	/* If bytes to read, send START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (master_bytesRead < bytesToRead) {
     ce0:	80 91 69 3c 	lds	r24, 0x3C69	; 0x803c69 <master_bytesRead>
     ce4:	89 17       	cp	r24, r25
     ce6:	60 f4       	brcc	.+24     	; 0xd00 <__vector_25+0xe2>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:442
		twi_mode = TWI_MODE_MASTER_RECEIVE;
     ce8:	84 e0       	ldi	r24, 0x04	; 4
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	80 93 65 3c 	sts	0x3C65, r24	; 0x803c65 <twi_mode>
     cf0:	90 93 66 3c 	sts	0x3C66, r25	; 0x803c66 <twi_mode+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:443
		uint8_t readAddress = ADD_READ_BIT(master_slaveAddress);
     cf4:	80 91 67 3c 	lds	r24, 0x3C67	; 0x803c67 <master_slaveAddress>
     cf8:	81 60       	ori	r24, 0x01	; 1
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:444
		TWI0.MADDR = readAddress;
     cfa:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     cfe:	b0 cf       	rjmp	.-160    	; 0xc60 <__vector_25+0x42>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:449
	}

	/* If transaction finished, send ACK/STOP condition if instructed and set RESULT OK. */
	else {
		if(master_sendStop){
     d00:	80 91 68 3c 	lds	r24, 0x3C68	; 0x803c68 <master_sendStop>
     d04:	88 23       	and	r24, r24
     d06:	29 f0       	breq	.+10     	; 0xd12 <__vector_25+0xf4>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:450
			TWI0.MCTRLB = TWI_MCMD_STOP_gc;
     d08:	83 e0       	ldi	r24, 0x03	; 3
TWI_MasterReadHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:501
	/* If transaction finished, issue NACK and STOP condition if instructed. */
	else {
		if(master_sendStop){
			TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
		} else {
			TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_REPSTART_gc;
     d0a:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
TWI_MasterTransactionFinished():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:517
 *
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(uint8_t result)
{
	master_result = result;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	c4 cf       	rjmp	.-120    	; 0xc9a <__vector_25+0x7c>
TWI_MasterWriteHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:452
	/* If transaction finished, send ACK/STOP condition if instructed and set RESULT OK. */
	else {
		if(master_sendStop){
			TWI0.MCTRLB = TWI_MCMD_STOP_gc;
		} else {
			TWI0.MCTRLB = TWI_MCMD_REPSTART_gc;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	fa cf       	rjmp	.-12     	; 0xd0a <__vector_25+0xec>
TWI_MasterInterruptHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:372
	else if (currentStatus & TWI_WIF_bm) {
		TWI_MasterWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_RIF_bm) {
     d16:	87 ff       	sbrs	r24, 7
     d18:	40 c0       	rjmp	.+128    	; 0xd9a <__vector_25+0x17c>
TWI_MasterReadHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:469
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler()
{
	/* Fetch data if bytes to be read. */
	if (master_bytesRead < master_bytesToRead) {
     d1a:	90 91 69 3c 	lds	r25, 0x3C69	; 0x803c69 <master_bytesRead>
     d1e:	80 91 6b 3c 	lds	r24, 0x3C6B	; 0x803c6b <master_bytesToRead>
     d22:	98 17       	cp	r25, r24
     d24:	d8 f4       	brcc	.+54     	; 0xd5c <__vector_25+0x13e>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:470
		uint8_t data = TWI0.MDATA;
     d26:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:471
		master_readData[master_bytesRead] = data;
     d2a:	e0 91 69 3c 	lds	r30, 0x3C69	; 0x803c69 <master_bytesRead>
     d2e:	20 91 58 3c 	lds	r18, 0x3C58	; 0x803c58 <master_readData>
     d32:	30 91 59 3c 	lds	r19, 0x3C59	; 0x803c59 <master_readData+0x1>
     d36:	e2 0f       	add	r30, r18
     d38:	f3 2f       	mov	r31, r19
     d3a:	f1 1d       	adc	r31, r1
     d3c:	80 83       	st	Z, r24
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:472
		master_bytesRead++;
     d3e:	80 91 69 3c 	lds	r24, 0x3C69	; 0x803c69 <master_bytesRead>
     d42:	8f 5f       	subi	r24, 0xFF	; 255
     d44:	80 93 69 3c 	sts	0x3C69, r24	; 0x803c69 <master_bytesRead>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:489
		master_bytesToRead = 0;
		return;
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = master_bytesToRead;
     d48:	90 91 6b 3c 	lds	r25, 0x3C6B	; 0x803c6b <master_bytesToRead>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:492

	/* If more bytes to read, issue ACK and start a byte read. */
	if (master_bytesRead < bytesToRead) {
     d4c:	80 91 69 3c 	lds	r24, 0x3C69	; 0x803c69 <master_bytesRead>
     d50:	89 17       	cp	r24, r25
     d52:	d8 f4       	brcc	.+54     	; 0xd8a <__vector_25+0x16c>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:493
		TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     d5a:	82 cf       	rjmp	.-252    	; 0xc60 <__vector_25+0x42>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:477
		master_bytesRead++;
	}

	/* If buffer overflow, issue NACK/STOP and BUFFER_OVERFLOW condition. */
	else {
		if(master_sendStop){
     d5c:	80 91 68 3c 	lds	r24, 0x3C68	; 0x803c68 <master_sendStop>
     d60:	88 23       	and	r24, r24
     d62:	89 f0       	breq	.+34     	; 0xd86 <__vector_25+0x168>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:478
			TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
     d64:	87 e0       	ldi	r24, 0x07	; 7
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:480
		} else {
			TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_REPSTART_gc;
     d66:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
TWI_MasterTransactionFinished():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:517
 *
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(uint8_t result)
{
	master_result = result;
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	80 93 6f 3c 	sts	0x3C6F, r24	; 0x803c6f <master_result>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:518
	master_trans_status = TWIM_STATUS_READY;
     d70:	10 92 70 3c 	sts	0x3C70, r1	; 0x803c70 <master_trans_status>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:519
	twi_mode = TWI_MODE_MASTER;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	80 93 65 3c 	sts	0x3C65, r24	; 0x803c65 <twi_mode>
     d7c:	90 93 66 3c 	sts	0x3C66, r25	; 0x803c66 <twi_mode+0x1>
TWI_MasterReadHandler():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:484
		} else {
			TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_REPSTART_gc;
		}
		
		TWI_MasterTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
		master_bytesToRead = 0;
     d80:	10 92 6b 3c 	sts	0x3C6B, r1	; 0x803c6b <master_bytesToRead>
     d84:	6d cf       	rjmp	.-294    	; 0xc60 <__vector_25+0x42>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:480
	/* If buffer overflow, issue NACK/STOP and BUFFER_OVERFLOW condition. */
	else {
		if(master_sendStop){
			TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
		} else {
			TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_REPSTART_gc;
     d86:	85 e0       	ldi	r24, 0x05	; 5
     d88:	ee cf       	rjmp	.-36     	; 0xd66 <__vector_25+0x148>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:498
		TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;
	}

	/* If transaction finished, issue NACK and STOP condition if instructed. */
	else {
		if(master_sendStop){
     d8a:	80 91 68 3c 	lds	r24, 0x3C68	; 0x803c68 <master_sendStop>
     d8e:	88 23       	and	r24, r24
     d90:	11 f0       	breq	.+4      	; 0xd96 <__vector_25+0x178>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:499
			TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
     d92:	87 e0       	ldi	r24, 0x07	; 7
     d94:	ba cf       	rjmp	.-140    	; 0xd0a <__vector_25+0xec>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:501
		} else {
			TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_REPSTART_gc;
     d96:	85 e0       	ldi	r24, 0x05	; 5
     d98:	b8 cf       	rjmp	.-144    	; 0xd0a <__vector_25+0xec>
TWI_MasterTransactionFinished():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src\utility/twi.c:517
 *
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(uint8_t result)
{
	master_result = result;
     d9a:	86 e0       	ldi	r24, 0x06	; 6
     d9c:	7e cf       	rjmp	.-260    	; 0xc9a <__vector_25+0x7c>

00000d9e <main>:
init():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:343
		
	#elif (F_CPU == 10000000) //20MHz prescaled by 2
		cpu_freq = 10000000;
		
		/* Clock DIV2 */
		_PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc));
     d9e:	c1 e0       	ldi	r28, 0x01	; 1
     da0:	88 ed       	ldi	r24, 0xD8	; 216
     da2:	84 bf       	out	0x34, r24	; 52
     da4:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:378
	 		#error "F_CPU defined as an unsupported value"
		#endif
	#endif

	/* Apply calculated value to F_CPU_CORRECTED */
	F_CPU_CORRECTED = (uint32_t)cpu_freq; //Spence 6/22/2019: This will always be equal to F_CPU! 
     da8:	80 e8       	ldi	r24, 0x80	; 128
     daa:	96 e9       	ldi	r25, 0x96	; 150
     dac:	a8 e9       	ldi	r26, 0x98	; 152
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	80 93 0a 3c 	sts	0x3C0A, r24	; 0x803c0a <F_CPU_CORRECTED>
     db4:	90 93 0b 3c 	sts	0x3C0B, r25	; 0x803c0b <F_CPU_CORRECTED+0x1>
     db8:	a0 93 0c 3c 	sts	0x3C0C, r26	; 0x803c0c <F_CPU_CORRECTED+0x2>
     dbc:	b0 93 0d 3c 	sts	0x3C0D, r27	; 0x803c0d <F_CPU_CORRECTED+0x3>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:392
	#if F_CPU >= 20000000 // 20 MHz / 128 = 156.250 kHz
		ADC0.CTRLC |= ADC_PRESC_DIV128_gc;
	#elif F_CPU >= 16000000 // 16 MHz / 128 = 125 kHz
		ADC0.CTRLC |= ADC_PRESC_DIV128_gc;
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 kHz
		ADC0.CTRLC |= ADC_PRESC_DIV64_gc;
     dc0:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     dc4:	85 60       	ori	r24, 0x05	; 5
     dc6:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:404
	#else // 128 kHz / 2 = 64 kHz -> This is the closest you can get, the prescaler is 2
		ADC0.CTRLC |= ADC_PRESC_DIV2_gc;
	#endif

	/* Enable ADC */
	ADC0.CTRLA |= ADC_ENABLE_bm;
     dca:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:405
	analogReference(VDD);
     dd4:	80 e1       	ldi	r24, 0x10	; 16
     dd6:	0e 94 12 01 	call	0x224	; 0x224 <analogReference>
setup_timers():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:13
void setup_timers() {

	/*  TYPE A TIMER   */

	/* PORTMUX setting for TCA */
	PORTMUX.CTRLA = PORTMUX_TCA00_DEFAULT_gc;
     dda:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:16
	
	/* Enable Split Mode */
	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
     dde:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:21

	//Only 1 WGM so no need to specifically set up. 

	/* Period setting, 8-bit register in SPLIT mode */
	TCA0.SPLIT.LPER	= PWM_TIMER_PERIOD;
     de2:	9f ef       	ldi	r25, 0xFF	; 255
     de4:	90 93 26 0a 	sts	0x0A26, r25	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:22
	TCA0.SPLIT.HPER	= PWM_TIMER_PERIOD;
     de8:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:26

	/* Default duty 50%, will re-assign in analogWrite() */
	//TODO: replace with for loop to make this smaller;
	TCA0.SPLIT.LCMP0 = PWM_TIMER_COMPARE;
     dec:	80 e8       	ldi	r24, 0x80	; 128
     dee:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:27
	TCA0.SPLIT.LCMP1 = PWM_TIMER_COMPARE;
     df2:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:28
	TCA0.SPLIT.LCMP2 = PWM_TIMER_COMPARE;
     df6:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x700a2c>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:29
	TCA0.SPLIT.HCMP0 = PWM_TIMER_COMPARE;
     dfa:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:30
	TCA0.SPLIT.HCMP1 = PWM_TIMER_COMPARE;
     dfe:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:31
	TCA0.SPLIT.HCMP2 = PWM_TIMER_COMPARE;
     e02:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <__TEXT_REGION_LENGTH__+0x700a2d>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:34

	/* Use DIV64 prescaler (giving 250kHz clock), enable TCA timer */
	TCA0.SPLIT.CTRLA = (TCA_SINGLE_CLKSEL_DIV64_gc) | (TCA_SINGLE_ENABLE_bm);
     e06:	2b e0       	ldi	r18, 0x0B	; 11
     e08:	20 93 00 0a 	sts	0x0A00, r18	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:53
	/* Timer B Setup loop for TCB[0:2] */
	#ifdef TCB1
	do{
	#endif 
		/* 8 bit PWM mode, but do not enable output yet, will do in analogWrite() */
		timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
     e0c:	27 e0       	ldi	r18, 0x07	; 7
     e0e:	20 93 41 0a 	sts	0x0A41, r18	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:56

		/* Assign 8-bit period */
		timer_B->CCMPL = PWM_TIMER_PERIOD;
     e12:	90 93 4c 0a 	sts	0x0A4C, r25	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:59

		/* default duty 50%, set when output enabled */
		timer_B->CCMPH = PWM_TIMER_COMPARE;
     e16:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\variants\txy4/variant.c:63

		/* Use TCA clock (250kHz) and enable */
		/* (sync update commented out, might try to synchronize later */
		timer_B->CTRLA = (TCB_CLKSEL_CLKTCA_gc)
     e1a:	85 e0       	ldi	r24, 0x05	; 5
     e1c:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
init():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:418
	setup_timers();

	/********************* TIMER for system time tracking **************************/

	/* Calculate relevant time tracking values */
	microseconds_per_timer_overflow = clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF);
     e20:	86 e6       	ldi	r24, 0x66	; 102
     e22:	96 e0       	ldi	r25, 0x06	; 6
     e24:	80 93 99 3c 	sts	0x3C99, r24	; 0x803c99 <microseconds_per_timer_overflow>
     e28:	90 93 9a 3c 	sts	0x3C9A, r25	; 0x803c9a <microseconds_per_timer_overflow+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:419
	microseconds_per_timer_tick = microseconds_per_timer_overflow/TIME_TRACKING_TIMER_PERIOD;
     e2c:	80 91 99 3c 	lds	r24, 0x3C99	; 0x803c99 <microseconds_per_timer_overflow>
     e30:	90 91 9a 3c 	lds	r25, 0x3C9A	; 0x803c9a <microseconds_per_timer_overflow+0x1>
     e34:	6f ef       	ldi	r22, 0xFF	; 255
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	0e 94 08 08 	call	0x1010	; 0x1010 <__udivmodhi4>
     e3c:	60 93 97 3c 	sts	0x3C97, r22	; 0x803c97 <microseconds_per_timer_tick>
     e40:	70 93 98 3c 	sts	0x3C98, r23	; 0x803c98 <microseconds_per_timer_tick+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:421

	millis_inc = microseconds_per_timer_overflow / 1000;
     e44:	80 91 99 3c 	lds	r24, 0x3C99	; 0x803c99 <microseconds_per_timer_overflow>
     e48:	90 91 9a 3c 	lds	r25, 0x3C9A	; 0x803c9a <microseconds_per_timer_overflow+0x1>
     e4c:	28 ee       	ldi	r18, 0xE8	; 232
     e4e:	33 e0       	ldi	r19, 0x03	; 3
     e50:	b9 01       	movw	r22, r18
     e52:	0e 94 08 08 	call	0x1010	; 0x1010 <__udivmodhi4>
     e56:	60 93 8f 3c 	sts	0x3C8F, r22	; 0x803c8f <millis_inc>
     e5a:	70 93 90 3c 	sts	0x3C90, r23	; 0x803c90 <millis_inc+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:422
	fract_inc = ((microseconds_per_timer_overflow % 1000));
     e5e:	80 91 99 3c 	lds	r24, 0x3C99	; 0x803c99 <microseconds_per_timer_overflow>
     e62:	90 91 9a 3c 	lds	r25, 0x3C9A	; 0x803c9a <microseconds_per_timer_overflow+0x1>
     e66:	b9 01       	movw	r22, r18
     e68:	0e 94 08 08 	call	0x1010	; 0x1010 <__udivmodhi4>
     e6c:	80 93 8d 3c 	sts	0x3C8D, r24	; 0x803c8d <fract_inc>
     e70:	90 93 8e 3c 	sts	0x3C8E, r25	; 0x803c8e <fract_inc+0x1>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:425

    #ifdef MILLIS_USE_TIMERA0
    TCA0.SPLIT.INTCTRL = TCA_SPLIT_LUNF_bm;
     e74:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring.c:447
	#ifdef DAC0
	VREF.CTRLA |= DACVREF;
	#endif
/*************************** ENABLE GLOBAL INTERRUPTS *************************/
	
	sei();
     e78:	78 94       	sei
begin():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:85
	
}

void TwoWire::begin(int address)
{
	begin((uint8_t)address);
     e7a:	68 e0       	ldi	r22, 0x08	; 8
     e7c:	85 e7       	ldi	r24, 0x75	; 117
     e7e:	9c e3       	ldi	r25, 0x3C	; 60
     e80:	0e 94 8c 03 	call	0x718	; 0x718 <TwoWire::begin(unsigned char)>
onRequest():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:320
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
	user_onRequest = function;
     e84:	8c e3       	ldi	r24, 0x3C	; 60
     e86:	94 e0       	ldi	r25, 0x04	; 4
     e88:	80 93 71 3c 	sts	0x3C71, r24	; 0x803c71 <TwoWire::user_onRequest>
     e8c:	90 93 72 3c 	sts	0x3C72, r25	; 0x803c72 <TwoWire::user_onRequest+0x1>
onReceive():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:314
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
	user_onReceive = function;
     e90:	84 e6       	ldi	r24, 0x64	; 100
     e92:	94 e0       	ldi	r25, 0x04	; 4
     e94:	80 93 73 3c 	sts	0x3C73, r24	; 0x803c73 <TwoWire::user_onReceive>
     e98:	90 93 74 3c 	sts	0x3C74, r25	; 0x803c74 <TwoWire::user_onReceive+0x1>
setup():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:115
void setup() 
{
  Wire.begin(I2C_ADDR);
  Wire.onRequest(requestEvent);
  Wire.onReceive(receiveEvent);
  analogReference(INTERNAL2V5);
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	0e 94 12 01 	call	0x224	; 0x224 <analogReference>
pinMode():
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	0e 94 81 00 	call	0x102	; 0x102 <pinMode.part.1>
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	84 e0       	ldi	r24, 0x04	; 4
     eb2:	0e 94 81 00 	call	0x102	; 0x102 <pinMode.part.1>
digitalWrite():
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	0e 94 ce 00 	call	0x19c	; 0x19c <digitalWrite.part.2>
map():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/api/Common.cpp:6
#include "Common.h"

/* C++ prototypes */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     ec0:	81 2c       	mov	r8, r1
     ec2:	34 e0       	ldi	r19, 0x04	; 4
     ec4:	93 2e       	mov	r9, r19
     ec6:	a1 2c       	mov	r10, r1
     ec8:	b1 2c       	mov	r11, r1
analogRead():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:87


#if defined(ADC0)
	/* Reference should be already set up */
	/* Select channel */
	ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
     eca:	d4 e0       	ldi	r29, 0x04	; 4
get_temperature():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:8

uint16_t get_temperature(void)
{
  analogReference(INTERNAL1V1);
  delay(1);
  ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
     ecc:	4e e1       	ldi	r20, 0x1E	; 30
     ece:	d4 2e       	mov	r13, r20
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:10
  ADC0.CTRLC &= ~(ADC_INITDLY_gm);
  ADC0.CTRLD = ADC_INITDLY_DLY256_gc;
     ed0:	50 ea       	ldi	r21, 0xA0	; 160
     ed2:	c5 2e       	mov	r12, r21
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:11
  ADC0.SAMPCTRL = 31;
     ed4:	6f e1       	ldi	r22, 0x1F	; 31
     ed6:	76 2e       	mov	r7, r22
main():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/main.cpp:47

	setup();

	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	e7 2e       	mov	r14, r23
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	f7 2e       	mov	r15, r23
loop():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:125
  digitalWrite(PIN_PWR_EN, LOW);
}

void loop() 
{
  delay(1000);
     ee0:	68 ee       	ldi	r22, 0xE8	; 232
     ee2:	73 e0       	ldi	r23, 0x03	; 3
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <delay>
analogRead():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:87
     eec:	c0 93 06 06 	sts	0x0606, r28	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:90

	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
     ef0:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:93

	/* Wait for result ready */
	while(!(ADC0.INTFLAGS & ADC_RESRDY_bm));
     ef4:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     ef8:	80 ff       	sbrs	r24, 0
     efa:	fc cf       	rjmp	.-8      	; 0xef4 <main+0x156>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:100
#else	/* No ADC, return 0 */
	return 0;
#endif

	/* Combine two bytes */
	return ADC0.RES;
     efc:	a0 91 10 06 	lds	r26, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     f00:	b0 91 11 06 	lds	r27, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
map():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/api/Common.cpp:6
     f04:	22 e8       	ldi	r18, 0x82	; 130
     f06:	34 e1       	ldi	r19, 0x14	; 20
     f08:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__usmulhisi3>
     f0c:	a5 01       	movw	r20, r10
     f0e:	94 01       	movw	r18, r8
     f10:	0e 94 3e 08 	call	0x107c	; 0x107c <__divmodsi4>
loop():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:126
  vbatt = map(analogRead(PIN_ADC_VBATT), 0, 1024, 0, 5250);
     f14:	20 93 89 3c 	sts	0x3C89, r18	; 0x803c89 <vbatt>
     f18:	30 93 8a 3c 	sts	0x3C8A, r19	; 0x803c8a <vbatt+0x1>
     f1c:	40 93 8b 3c 	sts	0x3C8B, r20	; 0x803c8b <vbatt+0x2>
     f20:	50 93 8c 3c 	sts	0x3C8C, r21	; 0x803c8c <vbatt+0x3>
analogRead():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:87


#if defined(ADC0)
	/* Reference should be already set up */
	/* Select channel */
	ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
     f24:	d0 93 06 06 	sts	0x0606, r29	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:90

	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
     f28:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:93

	/* Wait for result ready */
	while(!(ADC0.INTFLAGS & ADC_RESRDY_bm));
     f2c:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     f30:	80 ff       	sbrs	r24, 0
     f32:	fc cf       	rjmp	.-8      	; 0xf2c <main+0x18e>
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/wiring_analog.c:100
#else	/* No ADC, return 0 */
	return 0;
#endif

	/* Combine two bytes */
	return ADC0.RES;
     f34:	a0 91 10 06 	lds	r26, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     f38:	b0 91 11 06 	lds	r27, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
map():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/api/Common.cpp:6
     f3c:	26 ea       	ldi	r18, 0xA6	; 166
     f3e:	3e e0       	ldi	r19, 0x0E	; 14
     f40:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__usmulhisi3>
     f44:	a5 01       	movw	r20, r10
     f46:	94 01       	movw	r18, r8
     f48:	0e 94 3e 08 	call	0x107c	; 0x107c <__divmodsi4>
loop():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:127
  vrpi = map(analogRead(PIN_ADC_RPI_3V3), 0, 1024, 0, 3750);
     f4c:	20 93 85 3c 	sts	0x3C85, r18	; 0x803c85 <vrpi>
     f50:	30 93 86 3c 	sts	0x3C86, r19	; 0x803c86 <vrpi+0x1>
     f54:	40 93 87 3c 	sts	0x3C87, r20	; 0x803c87 <vrpi+0x2>
     f58:	50 93 88 3c 	sts	0x3C88, r21	; 0x803c88 <vrpi+0x3>
get_temperature():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:6
#include <Wire.h>
#include <util/crc16.h>

uint16_t get_temperature(void)
{
  analogReference(INTERNAL1V1);
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	0e 94 12 01 	call	0x224	; 0x224 <analogReference>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:7
  delay(1);
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <delay>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:8
  ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
     f6e:	d0 92 06 06 	sts	0x0606, r13	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:9
  ADC0.CTRLC &= ~(ADC_INITDLY_gm);
     f72:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     f76:	8f 71       	andi	r24, 0x1F	; 31
     f78:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:10
  ADC0.CTRLD = ADC_INITDLY_DLY256_gc;
     f7c:	c0 92 03 06 	sts	0x0603, r12	; 0x800603 <__TEXT_REGION_LENGTH__+0x700603>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:11
  ADC0.SAMPCTRL = 31;
     f80:	70 92 05 06 	sts	0x0605, r7	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:12
  ADC0.CTRLC |= ADC_SAMPCAP_bm;
     f84:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     f88:	80 64       	ori	r24, 0x40	; 64
     f8a:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:13
  ADC0.COMMAND = ADC_STCONV_bm;
     f8e:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:14
  while(!(ADC0.INTFLAGS & ADC_RESRDY_bm));
     f92:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     f96:	80 ff       	sbrs	r24, 0
     f98:	fc cf       	rjmp	.-8      	; 0xf92 <main+0x1f4>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:15
  uint16_t adc_reading = ADC0.RES;
     f9a:	00 91 10 06 	lds	r16, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     f9e:	10 91 11 06 	lds	r17, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:16
  analogReference(INTERNAL2V5);
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	0e 94 12 01 	call	0x224	; 0x224 <analogReference>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:18

  int8_t sigrow_offset = SIGROW.TEMPSENSE1;
     fa8:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <__TEXT_REGION_LENGTH__+0x701121>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:19
  uint8_t sigrow_gain = SIGROW.TEMPSENSE0;
     fac:	a0 91 20 11 	lds	r26, 0x1120	; 0x801120 <__TEXT_REGION_LENGTH__+0x701120>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:21

  uint32_t temp = adc_reading - sigrow_offset;
     fb0:	98 01       	movw	r18, r16
     fb2:	28 1b       	sub	r18, r24
     fb4:	31 09       	sbc	r19, r1
     fb6:	87 fd       	sbrc	r24, 7
     fb8:	33 95       	inc	r19
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:22
  temp *= sigrow_gain; // Result might overflow 16 bit variable (10bit+8bit)
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__umulhisi3>
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:23
  temp += 0x80; // Add 1/2 to get correct rounding on division below
     fc0:	60 58       	subi	r22, 0x80	; 128
     fc2:	7f 4f       	sbci	r23, 0xFF	; 255
     fc4:	8f 4f       	sbci	r24, 0xFF	; 255
     fc6:	9f 4f       	sbci	r25, 0xFF	; 255
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:24
  temp >>= 8; // Divide result to get Kelvin
     fc8:	67 2f       	mov	r22, r23
     fca:	78 2f       	mov	r23, r24
     fcc:	89 2f       	mov	r24, r25
     fce:	99 27       	eor	r25, r25
loop():
X:\projects\rpizero-lowpower\attiny_power_manager/attiny_power_manager.ino:128
void loop() 
{
  delay(1000);
  vbatt = map(analogRead(PIN_ADC_VBATT), 0, 1024, 0, 5250);
  vrpi = map(analogRead(PIN_ADC_RPI_3V3), 0, 1024, 0, 3750);
  temperature = get_temperature();
     fd0:	60 93 81 3c 	sts	0x3C81, r22	; 0x803c81 <temperature>
     fd4:	70 93 82 3c 	sts	0x3C82, r23	; 0x803c82 <temperature+0x1>
     fd8:	80 93 83 3c 	sts	0x3C83, r24	; 0x803c83 <temperature+0x2>
     fdc:	90 93 84 3c 	sts	0x3C84, r25	; 0x803c84 <temperature+0x3>
main():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/main.cpp:47
     fe0:	e1 14       	cp	r14, r1
     fe2:	f1 04       	cpc	r15, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <main+0x24a>
     fe6:	7c cf       	rjmp	.-264    	; 0xee0 <main+0x142>
     fe8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     fec:	79 cf       	rjmp	.-270    	; 0xee0 <main+0x142>

00000fee <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC2Ev():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/api/Print.h:41
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     fee:	e5 e7       	ldi	r30, 0x75	; 117
     ff0:	fc e3       	ldi	r31, 0x3C	; 60
     ff2:	12 82       	std	Z+2, r1	; 0x02
     ff4:	13 82       	std	Z+3, r1	; 0x03
_ZN6StreamC2Ev():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\cores\arduino/api/Stream.h:63
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     ff6:	88 ee       	ldi	r24, 0xE8	; 232
     ff8:	93 e0       	ldi	r25, 0x03	; 3
     ffa:	a0 e0       	ldi	r26, 0x00	; 0
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	84 83       	std	Z+4, r24	; 0x04
    1000:	95 83       	std	Z+5, r25	; 0x05
    1002:	a6 83       	std	Z+6, r26	; 0x06
    1004:	b7 83       	std	Z+7, r27	; 0x07
__base_ctor ():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:51
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1006:	8e e1       	ldi	r24, 0x1E	; 30
    1008:	91 e9       	ldi	r25, 0x91	; 145
    100a:	80 83       	st	Z, r24
    100c:	91 83       	std	Z+1, r25	; 0x01
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\pihlstro\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\1.0.2\libraries\Wire\src/Wire.cpp:325
	user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    100e:	08 95       	ret

00001010 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    1010:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1012:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1014:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    1016:	07 c0       	rjmp	.+14     	; 0x1026 <__udivmodhi4_ep>

00001018 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    1018:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    101a:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    101c:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    101e:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    1020:	10 f0       	brcs	.+4      	; 0x1026 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1022:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1024:	b7 0b       	sbc	r27, r23

00001026 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    1026:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    1028:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    102a:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    102c:	a9 f7       	brne	.-22     	; 0x1018 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    102e:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    1030:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1032:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1034:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1036:	08 95       	ret

00001038 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1038:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    103a:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    103c:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    103e:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1040:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1042:	0d c0       	rjmp	.+26     	; 0x105e <__udivmodsi4_ep>

00001044 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1044:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1046:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1048:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    104a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    104c:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    104e:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1050:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1052:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1054:	20 f0       	brcs	.+8      	; 0x105e <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1056:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1058:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    105a:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    105c:	f5 0b       	sbc	r31, r21

0000105e <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    105e:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1060:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1062:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1064:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1066:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1068:	69 f7       	brne	.-38     	; 0x1044 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    106a:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    106c:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    106e:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1070:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1072:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1074:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1076:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1078:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    107a:	08 95       	ret

0000107c <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    107c:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    107e:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    1080:	1e f4       	brtc	.+6      	; 0x1088 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    1082:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    1084:	0e 94 55 08 	call	0x10aa	; 0x10aa <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    1088:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    108a:	07 d0       	rcall	.+14     	; 0x109a <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    108c:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    1090:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    1092:	03 d0       	rcall	.+6      	; 0x109a <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    1094:	4e f4       	brtc	.+18     	; 0x10a8 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    1096:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__negsi2>

0000109a <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    109a:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    109c:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    109e:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    10a0:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    10a4:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    10a6:	5f 4f       	sbci	r21, 0xFF	; 255

000010a8 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    10a8:	08 95       	ret

000010aa <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    10aa:	90 95       	com	r25
    10ac:	80 95       	com	r24
    10ae:	70 95       	com	r23
    10b0:	61 95       	neg	r22
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	8f 4f       	sbci	r24, 0xFF	; 255
    10b6:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    10b8:	08 95       	ret

000010ba <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    10ba:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    10bc:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    10be:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    10c0:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    10c2:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    10c4:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    10c6:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    10c8:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    10ca:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    10cc:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    10ce:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    10d0:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    10d2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    10d4:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    10d6:	08 95       	ret

000010d8 <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    10d8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__umulhisi3>

000010dc <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    10dc:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    10de:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    10e0:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    10e2:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    10e4:	08 95       	ret

000010e6 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    10e6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    10ea:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    10ec:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    10ee:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    10f0:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    10f2:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    10f4:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    10f6:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    10f8:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    10fa:	08 95       	ret

000010fc <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    10fc:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    10fe:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1100:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1102:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1104:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1106:	09 94       	ijmp

00001108 <strcpy>:
strcpy():
    1108:	fb 01       	movw	r30, r22
    110a:	dc 01       	movw	r26, r24
    110c:	01 90       	ld	r0, Z+
    110e:	0d 92       	st	X+, r0
    1110:	00 20       	and	r0, r0
    1112:	e1 f7       	brne	.-8      	; 0x110c <strcpy+0x4>
    1114:	08 95       	ret

00001116 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1116:	f8 94       	cli

00001118 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1118:	ff cf       	rjmp	.-2      	; 0x1118 <__stop_program>
